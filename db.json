{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/threeAndFour.png","path":"images/threeAndFour.png","modified":0,"renderable":0},{"_id":"source/images/tiktok.jpg","path":"images/tiktok.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/blog.ico","path":"images/blog.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/weChat.jpg","path":"images/weChat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/money.png","path":"images/money.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/README.md","path":"lib/feed/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/LICENSE","path":"lib/feed/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/index.js","path":"lib/feed/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/atom.xml","path":"lib/feed/atom.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/package.json","path":"lib/feed/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/rss2.xml","path":"lib/feed/rss2.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/lib/generator.js","path":"lib/feed/lib/generator.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/test/custom.xml","path":"lib/feed/test/custom.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/test/index.js","path":"lib/feed/test/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/test/parse.js","path":"lib/feed/test/parse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/feed/lib/autodiscovery.js","path":"lib/feed/lib/autodiscovery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/Java开发知识储备.png","path":"images/Java开发知识储备.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/images/xhr.jpg","path":"images/xhr.jpg","modified":0,"renderable":1},{"_id":"source/images/didi.jpg","path":"images/didi.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"da6a18e5267c167f5c9e72d643e1ffee7a6573ef","modified":1599545098799},{"_id":"source/CNAME","hash":"9a3c87f3fda44a249539f8af480a154c3a143c2a","modified":1597718395054},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1591928253812},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1591928253812},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1591928253812},{"_id":"themes/hexo-theme-next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1591928253815},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"b4157d09f5669a47cc385f0063fdc81111567b02","modified":1592028260571},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1591928253816},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1591928253816},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1591928253816},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1591928253817},{"_id":"themes/hexo-theme-next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1591928253816},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1591928253821},{"_id":"themes/hexo-theme-next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1591928253840},{"_id":"themes/hexo-theme-next/_config.yml","hash":"c8375bd38f3b856b0cb1ac231695c1698c6fffaa","modified":1592028807585},{"_id":"source/_posts/alg-binary.md","hash":"b589b74038e93959c1e089f9e9251a17bb31342e","modified":1592638151885},{"_id":"source/_posts/.DS_Store","hash":"5d51d72099bd7c46c017ffba77e0d93626cb7a78","modified":1590718872449},{"_id":"source/_posts/Java.md","hash":"3bfdc4de01ba4ade2a46290d0d14f73999605057","modified":1589940991848},{"_id":"source/_posts/alg-fibonacci.md","hash":"a307bf2b1ab43c74f9e605bc7249cc3a6f358b07","modified":1597135175759},{"_id":"source/_posts/alg-reverse-integer.md","hash":"31dee1c0bd653a2a1a8214dc754a105d563e99a1","modified":1592638176454},{"_id":"source/_posts/alg-reverse-list.md","hash":"a3e5fd48d67c7d7bcd24276c28729afa01c9bffb","modified":1592624089123},{"_id":"source/_posts/net-IPC.md","hash":"ed575442f6aa365aa5ba61ae587f48d43589ddcf","modified":1592638468487},{"_id":"source/_posts/java-push.md","hash":"1a5f071ee80d103252316cb7244be2497babfc83","modified":1599547946211},{"_id":"source/_posts/java-interview.md","hash":"08be6f3b061a6fade85e8bc8b63b0980e007eb05","modified":1592625485256},{"_id":"source/_posts/net-dos.md","hash":"855d78464c6c3cfcccf14ac3b3b57610300fb35e","modified":1592187457783},{"_id":"source/_posts/net-three-and-four.md","hash":"59839ae23f3a1fce24f81c0e97565f83b4bd1888","modified":1592187425581},{"_id":"source/_posts/net-OSI.md","hash":"219bfa0655a6896655809bc2030d5124765c4ea3","modified":1592641129281},{"_id":"source/categories/index.md","hash":"8f57e765cd7466ac7ef78b15f898ee6259eeb239","modified":1591929454247},{"_id":"source/images/.DS_Store","hash":"9d81da316e9ea8d90e80eee8f58a41eaa8fab125","modified":1599546022909},{"_id":"source/about/index.md","hash":"429ba1cda4e5327ce0b613e1a6bfd9040eb322c1","modified":1592029733217},{"_id":"source/tags/index.md","hash":"5de6b2f8234f1c286b7db88741040dd5922c46ec","modified":1591929817850},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1591928253813},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1591928253813},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1591928253814},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1591928253814},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1591928253815},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1591928253815},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1591928253817},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1591928253817},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1591928253817},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1591928253817},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1591928253817},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1591928253818},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1591928253818},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1591928253818},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1591928253818},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1591928253821},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1591928253823},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1591928253822},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1591928253823},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1591928253823},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1591928253823},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1591928253824},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1591928253824},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1591928253824},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1591928253825},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1591928253826},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1591928253826},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1591928253826},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1591928253826},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1591928253827},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1591928253827},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"12bdb7e22880ec88cf5d723116fdb5ea0d7f8575","modified":1591949707995},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1591928253843},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"c53270b42f7017c26d65b19658299ab013b3e37a","modified":1592028700008},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"66cb23b936d2098f59ef477cd43a12d37ae31b6b","modified":1591931575451},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1591928253839},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1591928253839},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1591928253839},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1591928253839},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1591928253840},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1591928253840},{"_id":"source/images/threeAndFour.png","hash":"de0bf5947c916b08b261397e9e9f7337da510c3d","modified":1592146814558},{"_id":"source/images/tiktok.jpg","hash":"ec7c5d35ab8a8b49c9c985a98af204c2aa27b6e9","modified":1599545022339},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1591928253814},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1591928253813},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1591928253814},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1591928253814},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1591928253819},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1591928253818},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1591928253819},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1591928253819},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1591928253819},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1591928253821},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1591928253820},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1591928253821},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1591928253840},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1591928253842},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1591928253843},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1591928253844},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1591928253844},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1591928253844},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1591928253844},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1591928253844},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1591928253844},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1591928253844},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1591928253855},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1591928253859},{"_id":"themes/hexo-theme-next/source/lib/.DS_Store","hash":"efecd314db4791f5804ea5227f13275c76c93785","modified":1591943619836},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1591928253866},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1591928253865},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1591928253865},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1591928253865},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1591928253865},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1591928253865},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1591928253866},{"_id":"themes/hexo-theme-next/source/images/.DS_Store","hash":"9e040d455eeaadb5bf7e164d3a2a0dd17dba990d","modified":1591933693113},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1591928253860},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1591928253860},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1591928253860},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1591928253860},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1591928253863},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1591928253863},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1591928253863},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1591928253863},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1591928253864},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1591928253863},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1591928253864},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1591928253864},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1591928253864},{"_id":"themes/hexo-theme-next/source/images/blog.ico","hash":"dc4f6a39862f46add116253d626f87419fc3a80a","modified":1590824674718},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1591928253828},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1591928253828},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1591928253828},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1591928253828},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1591928253828},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1591928253830},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1591928253833},{"_id":"themes/hexo-theme-next/layout/_plugins/valine.ejs","hash":"e97652531196ea3cc0ed8f62cf8798907e86d902","modified":1591930054321},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1591928253833},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1591928253833},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1591928253834},{"_id":"themes/hexo-theme-next/source/images/weChat.jpg","hash":"3c24a5418c3df1580ac32a6b8af368d90ef80b5f","modified":1591889110647},{"_id":"themes/hexo-theme-next/source/images/money.png","hash":"02937e90828b89682a95796fedfd14e4ed9749b3","modified":1591888149948},{"_id":"themes/hexo-theme-next/source/images/wechatpay.png","hash":"02937e90828b89682a95796fedfd14e4ed9749b3","modified":1591888149948},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1591928253840},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1591928253840},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1591928253840},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1591928253841},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1591928253842},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1591928253858},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1591928253858},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1591928253859},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1591928253859},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1591928253859},{"_id":"themes/hexo-theme-next/source/lib/feed/.gitignore","hash":"8d518b3d548635184ca61eb624d3c0b5f9c7bc54","modified":1591934413585},{"_id":"themes/hexo-theme-next/source/lib/feed/.eslintrc","hash":"92226ac43601f373e373e0b3e84896bda8014c50","modified":1591934413585},{"_id":"themes/hexo-theme-next/source/lib/feed/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1591934413585},{"_id":"themes/hexo-theme-next/source/lib/feed/README.md","hash":"b22401b67ed3cae2c17c1fcec4b22b4edc368329","modified":1591934413586},{"_id":"themes/hexo-theme-next/source/lib/feed/LICENSE","hash":"c1ab0b31a4eaac78146deb56e5d7f19516fe7587","modified":1591934413586},{"_id":"themes/hexo-theme-next/source/lib/feed/.travis.yml","hash":"d7d63e7891f538e733baf410293c7d1b0c0480e0","modified":1591934413586},{"_id":"themes/hexo-theme-next/source/lib/feed/index.js","hash":"1f0fbda990828aa7fed2017b6f27c95a982b5ddb","modified":1591934413587},{"_id":"themes/hexo-theme-next/source/lib/feed/atom.xml","hash":"16cbba7da3a04268534542bcae4f1f0afaf68565","modified":1591934413586},{"_id":"themes/hexo-theme-next/source/lib/feed/package.json","hash":"71ffcdcbc84259a8d579226e62580006cd03c279","modified":1591934413587},{"_id":"themes/hexo-theme-next/source/lib/feed/rss2.xml","hash":"9091d855c00c0cd8e81a8a64bf590af19ac5092c","modified":1591934413587},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1591928253868},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1591928253869},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1591933601314},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","hash":"168f57bb63563b9671d0c4f10c0940e7eec261f0","modified":1591933601315},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1591933601315},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1591933601315},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1591933601316},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1591933601315},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1591933601316},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1591933601316},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1591933601317},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1591933601317},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1591933601317},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1591933601318},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1591933601317},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1591933601318},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1591933601318},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1591933601319},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1591928253866},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1591933601318},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1591933601319},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1591928253866},{"_id":"themes/hexo-theme-next/source/images/alipay.png","hash":"343316c3d7c2fc268767cc7999ba25cf3c7de8bc","modified":1592028638308},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1591928253829},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1591928253829},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1591928253830},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1591928253829},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1591928253830},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1591928253830},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1591928253830},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1591928253831},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1591928253832},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1591928253832},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1591928253832},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1591928253832},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1591928253833},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1591928253833},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1591928253835},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1591928253836},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"d6a644ea201eab30f8fb3b576e7abe9760261505","modified":1591929998933},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1591928253837},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1591928253838},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1591928253839},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1591928253834},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1591928253834},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1591928253845},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1591928253845},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1591928253845},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1591928253855},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1591928253855},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1591928253855},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1591928253855},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1591928253856},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1591928253857},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1591928253857},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1591928253857},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1591928253857},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1591928253857},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1591928253858},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1591928253858},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1591928253858},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1591928253867},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1591928253868},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/config","hash":"8f641d329190e8388edff2ede85bf478f8f3aa73","modified":1591934413581},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1591934413579},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1591934410171},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/index","hash":"b7aa4af05847c85833f65ad9bcdb8fd50c550eb9","modified":1591934413589},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/packed-refs","hash":"763fa2872f31b8feeb14c1c79b68082fa3e005e1","modified":1591934413577},{"_id":"themes/hexo-theme-next/source/lib/feed/test/.eslintrc","hash":"be92785332839300e5031657593a9ea7f14f5cbb","modified":1591934413588},{"_id":"themes/hexo-theme-next/source/lib/feed/test/.mocharc.yml","hash":"0f196ce8e0ccc39284c701906410940565df1ac1","modified":1591934413588},{"_id":"themes/hexo-theme-next/source/lib/feed/lib/generator.js","hash":"1999cb999050ed75299f9cf0c1fde83490402f40","modified":1591934413587},{"_id":"themes/hexo-theme-next/source/lib/feed/test/custom.xml","hash":"cda8e6b6ad27b00c2cc2bfa7fbb36cb6cdcb242c","modified":1591934413588},{"_id":"themes/hexo-theme-next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1591933601314},{"_id":"themes/hexo-theme-next/source/lib/feed/test/index.js","hash":"1a999bcfbf9f130e31a1d6dbbef2d095347784fe","modified":1591934413588},{"_id":"themes/hexo-theme-next/source/lib/feed/test/parse.js","hash":"7973f77190c99c493b9e572ef7a858563d75d2e7","modified":1591934413589},{"_id":"themes/hexo-theme-next/source/lib/feed/lib/autodiscovery.js","hash":"4728458d81018743c402be34990829c39c7204d0","modified":1591934413587},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1591933601308},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/config","hash":"02ca63cc8d2b099500699b543af07e204d96b982","modified":1591933601310},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/index","hash":"6ff57a00c91794d1f3660627ec6b6943eee3901c","modified":1591933601319},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1591933598628},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/packed-refs","hash":"7728d474cdaa7943851d42c42eaa718b8afbab97","modified":1591933601306},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1591928253867},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1591928253868},{"_id":"source/images/Java开发知识储备.png","hash":"8ce8f910af9267b06932918872d86f3256ca28dd","modified":1592299226488},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1591928253846},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1591928253846},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1591928253846},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1591928253846},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1591928253846},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1591928253847},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1591928253848},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1591928253853},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1591928253849},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1591928253854},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1591928253851},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1591928253852},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1591928253850},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1591934410173},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1591934410172},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1591934410173},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1591934410174},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1591934410174},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1591934410172},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1591934410173},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1591934410175},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1591934410174},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1591934410172},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/logs/HEAD","hash":"03a925e9ed813ff392af20843a9ea24ebce26067","modified":1591934413580},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1591934410175},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1591934410171},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1591933598629},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1591933598629},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1591933598631},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1591933598629},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1591933598632},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1591933598630},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1591933598629},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1591933598632},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1591933598630},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1591933598631},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1591933598633},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/HEAD","hash":"25f910bb6dcfc6096ae004cdb054ff0319fb80a7","modified":1591933601309},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1591933598627},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/refs/heads/master","hash":"8bac58303ba2968d9a33256c3c09a1192a5f1eac","modified":1591934413580},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/objects/pack/pack-9ce767b612683e112a08b4497182afa999b785eb.idx","hash":"6e7819ffae67f5a67503a1826d9c166daa6e4274","modified":1591934413566},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1591933601192},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1591933601199},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1591933601202},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1591933601212},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1591933601200},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1591933601206},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/27/8da13dccb38df6bb34360d4919ee2ba81ea6c7","hash":"c5618315849061059ddd6cbea8e11252c561cf48","modified":1591933601287},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1591933601210},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1591933601281},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1591933601209},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1591933601210},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/49/234ebf40b265bb9664d22bc391237ff856a3df","hash":"b527eb3cde1e78771ff68c5f633a3cf91816e274","modified":1591933601288},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1591933601283},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1591933601209},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1591933601211},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1591933601195},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/60/8cf35556105f51783ede3fa1e6c2102e8945de","hash":"2c71f7a2ff047119ee898a8edec216238710b89b","modified":1591933601203},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1591933601193},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1591933601211},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/7e/7e5cf8a2a18caf4e0262d1656dea658374d5ae","hash":"47eb39060193e0032e3223b4dfc1a6a55f6612fd","modified":1591933601285},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/6a/fa2f52022b00caac3817898d4338ce4d99aa45","hash":"1a6e249ff197293bc3733ddb7eb99d82a21b9342","modified":1591933601284},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1591933601201},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1591933601207},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1591933601193},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1591933601196},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1591933601208},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1591933601205},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1591933601208},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1591933601209},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/d4/7aaf8effab41aa414596c56dff4d35ff8da1f5","hash":"33e758f44ad48eb1540363a06c31bed1ed929c60","modified":1591933601285},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1591933601192},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1591933601194},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1591933601207},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/db/d45db3a1d6c09fdf30fc1f0bdc2c6fab5a0680","hash":"5c0bc5c141068651fcb47ef549f556d67153eecf","modified":1591933601191},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/e8/83088ed2cfe69a983e9e277a6b54b7de226344","hash":"2386487a5933380ac3305ea6b5744d75bdd07292","modified":1591933601197},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1591933601282},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/ec/6708dc18a5dd312a6735d4d09eddbdb76e75c2","hash":"66e03a78b2f1d36feb9f9347dd5e68e344c3ee68","modified":1591933601286},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1591933601205},{"_id":"themes/hexo-theme-next/source/images/xhr.jpg","hash":"d6daba4159e667650e91a4809ca7390f9e705ab8","modified":1590980055362},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/heads/master","hash":"22684435265b2bb504024b34b80ffbd6786a2411","modified":1591933601309},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/logs/refs/heads/master","hash":"03a925e9ed813ff392af20843a9ea24ebce26067","modified":1591934413581},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1591934413579},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/heads/master","hash":"25f910bb6dcfc6096ae004cdb054ff0319fb80a7","modified":1591933601309},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1591933601308},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/logs/refs/remotes/origin/HEAD","hash":"03a925e9ed813ff392af20843a9ea24ebce26067","modified":1591934413579},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"25f910bb6dcfc6096ae004cdb054ff0319fb80a7","modified":1591933601308},{"_id":"themes/hexo-theme-next/source/lib/feed/.git/objects/pack/pack-9ce767b612683e112a08b4497182afa999b785eb.pack","hash":"c8c81443f755dee67d000f2842fcffec7fe8b956","modified":1591934413566},{"_id":"public/atom.xml","hash":"48740c6c8b3d8fc183c9c6fc5b102727b5644628","modified":1599547958749},{"_id":"public/search.xml","hash":"c61ec2ef9966e790a68589ccefe3a626fdfbb97f","modified":1599547958749},{"_id":"public/categories/index.html","hash":"71645c853653dcf9cb2350ee03b37379f2fe5d59","modified":1599547958749},{"_id":"public/tags/index.html","hash":"d0dd52afda5a1134b1b3aca0f93e5083bb33891c","modified":1599547958749},{"_id":"public/categories/Java面试图谱/index.html","hash":"744439fb8d4429177c2b8acfd65c825e9223b15f","modified":1599547958749},{"_id":"public/archives/page/2/index.html","hash":"a03c3a23070c3c73d1c90d2e46fc72bb5eb90830","modified":1599547958749},{"_id":"public/archives/2020/page/2/index.html","hash":"87243fcf5315093435ac77731c16628cd8e67811","modified":1599547958749},{"_id":"public/archives/2020/05/index.html","hash":"9c4206a90b1c701b75e23d9bb269c8b1f5f630ab","modified":1599547958749},{"_id":"public/archives/2020/08/index.html","hash":"82344d4ec11700b92fa08b5db3bf3c0a73c5fbfa","modified":1599547958749},{"_id":"public/archives/2020/09/index.html","hash":"8bf999b07b79017e7652fe0d2d45f76cbe7c275a","modified":1599547958749},{"_id":"public/tags/algorithm/index.html","hash":"133d8390a1770c742604cf9cba2c7a8c5a880801","modified":1599547958749},{"_id":"public/tags/进程通信/index.html","hash":"ef71e3e26ba664e1407162c6271b4055181d9a1c","modified":1599547958749},{"_id":"public/tags/Java面试/index.html","hash":"b17dd4c17a7c44dd19597f4dc989f791582b056c","modified":1599547958749},{"_id":"public/tags/图谱/index.html","hash":"6ddf0bdcee3e89044171d660dc44e53ce6f5263c","modified":1599547958749},{"_id":"public/tags/网络/index.html","hash":"997f69414930351638469dd17fd1ac4067518232","modified":1599547958749},{"_id":"public/tags/dos/index.html","hash":"b0754c1d4361fdd987fef7dd9efd5610c56d6374","modified":1599547958749},{"_id":"public/tags/internet/index.html","hash":"dbe95034eed6b3c3e82800016b33353b3be61062","modified":1599547958749},{"_id":"public/tags/TCP/index.html","hash":"13d1c40e6e45729e3ba06d152b201fdf770415b1","modified":1599547958749},{"_id":"public/about/index.html","hash":"05f209e779e87588c3ee47cdfeee0bb9972c58e2","modified":1599547958749},{"_id":"public/2020/09/08/java-push/index.html","hash":"df96a13aa0f7a09914a7d7e86fd6d263c35fed35","modified":1599547958749},{"_id":"public/2020/08/11/alg-fibonacci/index.html","hash":"983eccefa06b043a249d4e6e7db31fe727d1d6ac","modified":1599547958749},{"_id":"public/2020/06/20/net-OSI/index.html","hash":"b44c67e0f3bd2b150e0f20a8e7860d1df3d74b16","modified":1599547958749},{"_id":"public/2020/06/20/net-IPC/index.html","hash":"2477382f5a982cc9818997c9ade0ca7f4943fdd4","modified":1599547958749},{"_id":"public/2020/06/16/java-interview/index.html","hash":"35c57c73c577309b43c315d1ce42677f02263e81","modified":1599547958749},{"_id":"public/2020/06/14/net-three-and-four/index.html","hash":"43fc0c5891c1428f8175e1a57c9de2f2687f2e01","modified":1599547958749},{"_id":"public/2020/06/13/net-dos/index.html","hash":"13d9599a2282fc24bdb3015b72f9ab5f224e9308","modified":1599547958749},{"_id":"public/2020/06/13/alg-reverse-integer/index.html","hash":"13492cf7c34e24e7a97aff6b85de2d1f1a8df9d2","modified":1599547958749},{"_id":"public/2020/06/12/alg-reverse-list/index.html","hash":"1588b286b446a9aabcb4173567141b444847632f","modified":1599547958749},{"_id":"public/2020/06/07/alg-binary/index.html","hash":"9a604765ed0416e19360cdaed021f08b4a727486","modified":1599547958749},{"_id":"public/2020/05/20/Java/index.html","hash":"9588244022e3b5539628204ce61c2dd810919e46","modified":1599547958749},{"_id":"public/categories/算法/index.html","hash":"329369b3c8b33f594e1a850ec5af5e3d16468c61","modified":1599547958749},{"_id":"public/categories/计算机网络/index.html","hash":"b5e364ecb47f58e9a0bc1b7d2d6fc8942dc02104","modified":1599547958749},{"_id":"public/archives/index.html","hash":"41a723cfc59e15df720ad6a72e00c46e6493b332","modified":1599547958749},{"_id":"public/archives/2020/index.html","hash":"32fed98366f3f7107c9c593d0cc139b97dd8fb79","modified":1599547958749},{"_id":"public/archives/2020/06/index.html","hash":"3deeb59ef2c1798b21bc8dc654231836787e0034","modified":1599547958749},{"_id":"public/index.html","hash":"f755eab3dace51296ed405b4eb3157731216b4b9","modified":1599547958749},{"_id":"public/page/2/index.html","hash":"447449e602510dd0d5edb551a3c61e0079a07ccd","modified":1599547958749},{"_id":"public/tags/leetcode/index.html","hash":"8a424fe02af78dffa0b30e7a41c866d4bb16057e","modified":1599547958749},{"_id":"public/tags/面试题/index.html","hash":"8824a348dac14a7b0181c897604f26c389f62e9c","modified":1599547958749},{"_id":"public/CNAME","hash":"9a3c87f3fda44a249539f8af480a154c3a143c2a","modified":1599545321250},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599545321250},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599545321250},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599545321250},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599545321250},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599545321250},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599545321250},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599545321250},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599545321250},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599545321250},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599545321250},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599545321250},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599545321250},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599545321250},{"_id":"public/images/blog.ico","hash":"dc4f6a39862f46add116253d626f87419fc3a80a","modified":1599545321250},{"_id":"public/lib/feed/LICENSE","hash":"c1ab0b31a4eaac78146deb56e5d7f19516fe7587","modified":1599545321250},{"_id":"public/lib/feed/atom.xml","hash":"16cbba7da3a04268534542bcae4f1f0afaf68565","modified":1599545321250},{"_id":"public/lib/feed/rss2.xml","hash":"9091d855c00c0cd8e81a8a64bf590af19ac5092c","modified":1599545321250},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1599545321250},{"_id":"public/lib/feed/test/custom.xml","hash":"cda8e6b6ad27b00c2cc2bfa7fbb36cb6cdcb242c","modified":1599545321250},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599545321250},{"_id":"public/images/threeAndFour.png","hash":"de0bf5947c916b08b261397e9e9f7337da510c3d","modified":1599545321250},{"_id":"public/images/tiktok.jpg","hash":"ec7c5d35ab8a8b49c9c985a98af204c2aa27b6e9","modified":1599545321250},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599545321250},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599545321250},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599545321250},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599545321250},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599545321250},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599545321250},{"_id":"public/lib/feed/index.js","hash":"1f0fbda990828aa7fed2017b6f27c95a982b5ddb","modified":1599545321250},{"_id":"public/lib/feed/package.json","hash":"2bdccf2ec633684faa90bab9844f856ac7e363b4","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1599545321250},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599545321250},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599545321250},{"_id":"public/lib/feed/lib/generator.js","hash":"1999cb999050ed75299f9cf0c1fde83490402f40","modified":1599545321250},{"_id":"public/lib/feed/test/parse.js","hash":"7973f77190c99c493b9e572ef7a858563d75d2e7","modified":1599545321250},{"_id":"public/lib/feed/lib/autodiscovery.js","hash":"4728458d81018743c402be34990829c39c7204d0","modified":1599545321250},{"_id":"public/lib/feed/README.html","hash":"884d07feb67605acbd3137affefeb18e9adc93d1","modified":1599545321250},{"_id":"public/lib/pace/README.html","hash":"e1909ab93f97012da3506bd7aaf184e390ffff16","modified":1599545321250},{"_id":"public/css/main.css","hash":"714c125c2ee055d9c63553fd26419f3e3eaf756e","modified":1599545321250},{"_id":"public/images/weChat.jpg","hash":"3c24a5418c3df1580ac32a6b8af368d90ef80b5f","modified":1599545321250},{"_id":"public/images/money.png","hash":"02937e90828b89682a95796fedfd14e4ed9749b3","modified":1599545321250},{"_id":"public/images/wechatpay.png","hash":"02937e90828b89682a95796fedfd14e4ed9749b3","modified":1599545321250},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599545321250},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1599545321250},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1599545321250},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1599545321250},{"_id":"public/lib/feed/test/index.js","hash":"1a999bcfbf9f130e31a1d6dbbef2d095347784fe","modified":1599545321250},{"_id":"public/images/alipay.png","hash":"343316c3d7c2fc268767cc7999ba25cf3c7de8bc","modified":1599545321250},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599545321250},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1599545321250},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599545321250},{"_id":"public/images/xhr.jpg","hash":"d6daba4159e667650e91a4809ca7390f9e705ab8","modified":1599545321250},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599545321250},{"_id":"public/images/Java开发知识储备.png","hash":"8ce8f910af9267b06932918872d86f3256ca28dd","modified":1599545321250},{"_id":"source/images/didi.jpg","hash":"9e36e0595f5c3dfb4effcd58610d9eddce34ff31","modified":1599299662165},{"_id":"public/tags/校招/index.html","hash":"bde3cb0fa85c8acfaa72d5fb03710016c2632082","modified":1599547958749},{"_id":"public/tags/面试/index.html","hash":"8760c875a15f210a5a321f8033dc952718b8bef5","modified":1599546881548},{"_id":"public/categories/内推/index.html","hash":"4f72438857b40b784b2b773a6fbf7a38a63ece47","modified":1599547958749},{"_id":"public/images/didi.jpg","hash":"9e36e0595f5c3dfb4effcd58610d9eddce34ff31","modified":1599546881548}],"Category":[{"name":"算法","_id":"cketjzha50004i5ngepk3hpko"},{"name":"计算机网络","_id":"cketjzhaf000gi5ngbzxp567r"},{"name":"Java面试图谱","_id":"cketjzhal000ni5ng5vgqb9md"},{"name":"内推","_id":"cketk0d3p0000j9ng6gfyf53v"}],"Data":[],"Page":[{"title":"category","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: category\ntype: \"categories\"\n---\n","date":"2020-06-12T02:37:34.247Z","updated":"2020-06-12T02:37:34.247Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cketjzha00001i5ngegovbdca","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2020-06-11T10:46:08.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n  <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n  <title><%= htmlWebpackPlugin.options.title %></title>\n</head>\n\n<body>\n  <noscript>\n    <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\n      Please enable it to continue.</strong>\n  </noscript>\n  <div id=\"app\">\n    <div class=\"header_image_content\"></div>\n    <div class=\"user_name_content\">Hi G.Miao</div>\n    <br />\n    <div class=\"user_info_content\">\n      <div>QQ: 1159950461</div>\n      <div>WeChat: m1159950461</div>\n      <div>Email: mgq_1996@163.com</div>\n    </div>\n    <br />\n    <div class=\"bottom_button_content\">\n    \t<div>\n    \t\t<div class=\"add_us_content\"> </div>\n    \t\t<div class=\"wechat_content\">加入我们</div>\n    \t</div>\n\t      <!-- <div>\n\t      \t<div class=\"reward_us_content\"></div> \n\t      \t<div class=\"wechat_content\">打赏</div>\n\t      </div> -->\n    </div>\n     \n  </div>\n</body>\n\n</html>\n<script>\n\n</script>\n<style>\n.header_image_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/xhr.jpg\");\n  background-size: cover;\n  border-radius: 50px;\n  margin: auto auto 20px auto;\n}\n.user_name_content {\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n.wechat_content {\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n\n.user_info_content {\n  color: cadetblue;\n  text-align: center;\n}\n\n.bottom_button_content {\n  display: flex;\n  justify-content: center;\n}\n\n.add_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/weChat.jpg\");\n  background-size: cover;\n  display: inline-block;\n  margin-right: 20px;\n  margin-left: 20px;\n  border-radius: 5px;\n}\n\n.reward_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/money.png\");\n  background-size: cover;\t\n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  border-radius: 5px;\n}\n</style>","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-06-11 18:46:08\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n  <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n  <title><%= htmlWebpackPlugin.options.title %></title>\n</head>\n\n<body>\n  <noscript>\n    <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\n      Please enable it to continue.</strong>\n  </noscript>\n  <div id=\"app\">\n    <div class=\"header_image_content\"></div>\n    <div class=\"user_name_content\">Hi G.Miao</div>\n    <br />\n    <div class=\"user_info_content\">\n      <div>QQ: 1159950461</div>\n      <div>WeChat: m1159950461</div>\n      <div>Email: mgq_1996@163.com</div>\n    </div>\n    <br />\n    <div class=\"bottom_button_content\">\n    \t<div>\n    \t\t<div class=\"add_us_content\"> </div>\n    \t\t<div class=\"wechat_content\">加入我们</div>\n    \t</div>\n\t      <!-- <div>\n\t      \t<div class=\"reward_us_content\"></div> \n\t      \t<div class=\"wechat_content\">打赏</div>\n\t      </div> -->\n    </div>\n     \n  </div>\n</body>\n\n</html>\n<script>\n\n</script>\n<style>\n.header_image_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/xhr.jpg\");\n  background-size: cover;\n  border-radius: 50px;\n  margin: auto auto 20px auto;\n}\n.user_name_content {\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n.wechat_content {\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n\n.user_info_content {\n  color: cadetblue;\n  text-align: center;\n}\n\n.bottom_button_content {\n  display: flex;\n  justify-content: center;\n}\n\n.add_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/weChat.jpg\");\n  background-size: cover;\n  display: inline-block;\n  margin-right: 20px;\n  margin-left: 20px;\n  border-radius: 5px;\n}\n\n.reward_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/money.png\");\n  background-size: cover;\t\n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  border-radius: 5px;\n}\n</style>","updated":"2020-06-13T06:28:53.217Z","path":"about/index.html","comments":1,"layout":"page","_id":"cketjzha30003i5ng22su91mn","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n  <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n  <title><%= htmlWebpackPlugin.options.title %></title>\n<link rel=\"alternate\" href=\"/atom.xml\" title=\"G.Miao's Blog\" type=\"application/atom+xml\">\n</head>\n\n<body>\n  <noscript>\n    <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\n      Please enable it to continue.</strong>\n  </noscript>\n  <div id=\"app\">\n    <div class=\"header_image_content\"></div>\n    <div class=\"user_name_content\">Hi G.Miao</div>\n    <br />\n    <div class=\"user_info_content\">\n      <div>QQ: 1159950461</div>\n      <div>WeChat: m1159950461</div>\n      <div>Email: mgq_1996@163.com</div>\n    </div>\n    <br />\n    <div class=\"bottom_button_content\">\n        <div>\n            <div class=\"add_us_content\"> </div>\n            <div class=\"wechat_content\">加入我们</div>\n        </div>\n          <!-- <div>\n              <div class=\"reward_us_content\"></div> \n              <div class=\"wechat_content\">打赏</div>\n          </div> -->\n    </div>\n\n  </div>\n</body>\n\n</html>\n<script>\n\n<p></script></p>\n<style>\n.header_image_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/xhr.jpg\");\n  background-size: cover;\n  border-radius: 50px;\n  margin: auto auto 20px auto;\n}\n.user_name_content {\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n.wechat_content {\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n\n.user_info_content {\n  color: cadetblue;\n  text-align: center;\n}\n\n.bottom_button_content {\n  display: flex;\n  justify-content: center;\n}\n\n.add_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/weChat.jpg\");\n  background-size: cover;\n  display: inline-block;\n  margin-right: 20px;\n  margin-left: 20px;\n  border-radius: 5px;\n}\n\n.reward_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/money.png\");\n  background-size: cover;    \n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  border-radius: 5px;\n}\n</style>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n  <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n  <title><%= htmlWebpackPlugin.options.title %></title>\n<link rel=\"alternate\" href=\"/atom.xml\" title=\"G.Miao's Blog\" type=\"application/atom+xml\">\n</head>\n\n<body>\n  <noscript>\n    <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.\n      Please enable it to continue.</strong>\n  </noscript>\n  <div id=\"app\">\n    <div class=\"header_image_content\"></div>\n    <div class=\"user_name_content\">Hi G.Miao</div>\n    <br />\n    <div class=\"user_info_content\">\n      <div>QQ: 1159950461</div>\n      <div>WeChat: m1159950461</div>\n      <div>Email: mgq_1996@163.com</div>\n    </div>\n    <br />\n    <div class=\"bottom_button_content\">\n        <div>\n            <div class=\"add_us_content\"> </div>\n            <div class=\"wechat_content\">加入我们</div>\n        </div>\n          <!-- <div>\n              <div class=\"reward_us_content\"></div> \n              <div class=\"wechat_content\">打赏</div>\n          </div> -->\n    </div>\n\n  </div>\n</body>\n\n</html>\n<script>\n\n<p></script></p>\n<style>\n.header_image_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/xhr.jpg\");\n  background-size: cover;\n  border-radius: 50px;\n  margin: auto auto 20px auto;\n}\n.user_name_content {\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n.wechat_content {\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 28px;\n  text-align: center;\n}\n\n.user_info_content {\n  color: cadetblue;\n  text-align: center;\n}\n\n.bottom_button_content {\n  display: flex;\n  justify-content: center;\n}\n\n.add_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/weChat.jpg\");\n  background-size: cover;\n  display: inline-block;\n  margin-right: 20px;\n  margin-left: 20px;\n  border-radius: 5px;\n}\n\n.reward_us_content {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"/images/money.png\");\n  background-size: cover;    \n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  border-radius: 5px;\n}\n</style>"},{"title":"Tag","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tag\ntype: \"tags\"\n---\n","date":"2020-06-12T02:43:37.850Z","updated":"2020-06-12T02:43:37.850Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cketjzha90007i5ng5f585ojy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"二分法查找","date":"2020-06-07T06:58:21.000Z","_content":"\n### 摘要\n--------------------\n> 二分法查找：又称折半查找。适用于有序数据集合的目标值查找。\n    \n    二分法思想：假设有一个按升序排好序的数列data，查找目标值target，过程如下：\n    1.将数列进行折半，判断data[mid]是否等于target, 相等则返回index, 否则，判断中间值和target大小；\n    2.若 target > data[mid]，将data右一半执行第一步，否则，将data左一半执行第一步；\n    3.返回index\n\n<!--more-->\n### code\n---------------------\n废话不多说，上代码\n```java\npublic class BinarySearch {\n\n    public int getIndex(int[] data, int target) {\n\n        int left = 0;\n        int right = data.length - 1;\n\n        while (left <= right) {\n            //定义一个中间值索引\n            int mid = left + (right - left) / 2;\n            if(data[mid] == target) {\n                //查到目标值，直接返回索引值\n                return mid;\n            } else if(data[mid] < target) {\n                //目标值在数列的右半部分\n                left = mid + 1;\n            } else {\n                //目标值在数列的左半部分\n                right = mid - 1;\n            }\n        }\n        //结束，未找到target，返回-1\n        return -1;\n    }\n}\n```\n\n### 变异\n> 假如数列中出现了重复项，那我们查到的index便不确定，那如何在重复项得到最小的一个位置呢？\n#### 二分查找 + 顺序查找\n\n```java\npublic int getRepeatIndex(int[] data, int target) {\n        int left = 0;\n        int right = data.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            //这里做一改变\n            //如果定位到目标值，不立即返回，顺序查找到最靠前的一个\n            if(data[mid] == target) {\n                while (mid >= 0) {\n                    if(data[mid] != target) {\n                        break;\n                    }\n                    mid --;\n                }\n                //循环时多-1，返回时加上\n                return mid + 1;\n            } else if(data[mid] < target) {\n                //目标值在数列的右半部分\n                left = mid + 1;\n            } else {\n                //目标值在数列的左半部分\n                right = mid - 1;\n            }\n        }\n        //如果可以找到，left则为对应的索引值\n        if(data[left] == target) {\n            return left;\n        } else {\n            return -1;\n        }\n    }\n```\n\n#### 二分法到底\n> 可能大多数考虑到上述的情况就结束了，仔细想想，还可不可以更快一点儿呢，回答是肯定的\n\n```java\npublic int getRepeatIndex(int[] data, int target) {\n        int left = 0;\n        int right = data.length - 1;\n        //如果数组空直接返回，防止数组越界\n        if(data.length == 0) {\n            return -1;\n        }\n        //'<'不是'<=',如果等于会出现死循环\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            //关键部位！！！\n            //保持要查到的值始终是最小索引的，二分查比顺序查要快\n            if(data[mid] >= target) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        //如果可以找到，left则为对应的索引值\n        if(data[left] == target) {\n            return left;\n        } else {\n            return -1;\n        }\n    }\n```\n\n-------------------","source":"_posts/alg-binary.md","raw":"---\ntitle: 二分法查找\ndate: 2020-06-07 14:58:21\ntags:\n- leetcode\n- algorithm\n- 面试题\ncategories: \n- 算法\n---\n\n### 摘要\n--------------------\n> 二分法查找：又称折半查找。适用于有序数据集合的目标值查找。\n    \n    二分法思想：假设有一个按升序排好序的数列data，查找目标值target，过程如下：\n    1.将数列进行折半，判断data[mid]是否等于target, 相等则返回index, 否则，判断中间值和target大小；\n    2.若 target > data[mid]，将data右一半执行第一步，否则，将data左一半执行第一步；\n    3.返回index\n\n<!--more-->\n### code\n---------------------\n废话不多说，上代码\n```java\npublic class BinarySearch {\n\n    public int getIndex(int[] data, int target) {\n\n        int left = 0;\n        int right = data.length - 1;\n\n        while (left <= right) {\n            //定义一个中间值索引\n            int mid = left + (right - left) / 2;\n            if(data[mid] == target) {\n                //查到目标值，直接返回索引值\n                return mid;\n            } else if(data[mid] < target) {\n                //目标值在数列的右半部分\n                left = mid + 1;\n            } else {\n                //目标值在数列的左半部分\n                right = mid - 1;\n            }\n        }\n        //结束，未找到target，返回-1\n        return -1;\n    }\n}\n```\n\n### 变异\n> 假如数列中出现了重复项，那我们查到的index便不确定，那如何在重复项得到最小的一个位置呢？\n#### 二分查找 + 顺序查找\n\n```java\npublic int getRepeatIndex(int[] data, int target) {\n        int left = 0;\n        int right = data.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            //这里做一改变\n            //如果定位到目标值，不立即返回，顺序查找到最靠前的一个\n            if(data[mid] == target) {\n                while (mid >= 0) {\n                    if(data[mid] != target) {\n                        break;\n                    }\n                    mid --;\n                }\n                //循环时多-1，返回时加上\n                return mid + 1;\n            } else if(data[mid] < target) {\n                //目标值在数列的右半部分\n                left = mid + 1;\n            } else {\n                //目标值在数列的左半部分\n                right = mid - 1;\n            }\n        }\n        //如果可以找到，left则为对应的索引值\n        if(data[left] == target) {\n            return left;\n        } else {\n            return -1;\n        }\n    }\n```\n\n#### 二分法到底\n> 可能大多数考虑到上述的情况就结束了，仔细想想，还可不可以更快一点儿呢，回答是肯定的\n\n```java\npublic int getRepeatIndex(int[] data, int target) {\n        int left = 0;\n        int right = data.length - 1;\n        //如果数组空直接返回，防止数组越界\n        if(data.length == 0) {\n            return -1;\n        }\n        //'<'不是'<=',如果等于会出现死循环\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            //关键部位！！！\n            //保持要查到的值始终是最小索引的，二分查比顺序查要快\n            if(data[mid] >= target) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        //如果可以找到，left则为对应的索引值\n        if(data[left] == target) {\n            return left;\n        } else {\n            return -1;\n        }\n    }\n```\n\n-------------------","slug":"alg-binary","published":1,"updated":"2020-06-20T07:29:11.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzh9n0000i5ng7bplcw8u","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><hr>\n<blockquote>\n<p>二分法查找：又称折半查找。适用于有序数据集合的目标值查找。</p>\n</blockquote>\n<pre><code>二分法思想：假设有一个按升序排好序的数列data，查找目标值target，过程如下：\n1.将数列进行折半，判断data[mid]是否等于target, 相等则返回index, 否则，判断中间值和target大小；\n2.若 target &gt; data[mid]，将data右一半执行第一步，否则，将data左一半执行第一步；\n3.返回index</code></pre><a id=\"more\"></a>\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h3><hr>\n<p>废话不多说，上代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定义一个中间值索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//查到目标值，直接返回索引值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data[mid] &lt; target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的右半部分</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的左半部分</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//结束，未找到target，返回-1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变异\"><a href=\"#变异\" class=\"headerlink\" title=\"变异\"></a>变异</h3><blockquote>\n<p>假如数列中出现了重复项，那我们查到的index便不确定，那如何在重复项得到最小的一个位置呢？</p>\n</blockquote>\n<h4 id=\"二分查找-顺序查找\"><a href=\"#二分查找-顺序查找\" class=\"headerlink\" title=\"二分查找 + 顺序查找\"></a>二分查找 + 顺序查找</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRepeatIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//这里做一改变</span></span><br><span class=\"line\">            <span class=\"comment\">//如果定位到目标值，不立即返回，顺序查找到最靠前的一个</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (mid &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(data[mid] != target) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mid --;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//循环时多-1，返回时加上</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data[mid] &lt; target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的右半部分</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的左半部分</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果可以找到，left则为对应的索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[left] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二分法到底\"><a href=\"#二分法到底\" class=\"headerlink\" title=\"二分法到底\"></a>二分法到底</h4><blockquote>\n<p>可能大多数考虑到上述的情况就结束了，仔细想想，还可不可以更快一点儿呢，回答是肯定的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRepeatIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果数组空直接返回，防止数组越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//'&lt;'不是'&lt;=',如果等于会出现死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//关键部位！！！</span></span><br><span class=\"line\">            <span class=\"comment\">//保持要查到的值始终是最小索引的，二分查比顺序查要快</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] &gt;= target) &#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果可以找到，left则为对应的索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[left] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><hr>\n<blockquote>\n<p>二分法查找：又称折半查找。适用于有序数据集合的目标值查找。</p>\n</blockquote>\n<pre><code>二分法思想：假设有一个按升序排好序的数列data，查找目标值target，过程如下：\n1.将数列进行折半，判断data[mid]是否等于target, 相等则返回index, 否则，判断中间值和target大小；\n2.若 target &gt; data[mid]，将data右一半执行第一步，否则，将data左一半执行第一步；\n3.返回index</code></pre>","more":"<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h3><hr>\n<p>废话不多说，上代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定义一个中间值索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//查到目标值，直接返回索引值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data[mid] &lt; target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的右半部分</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的左半部分</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//结束，未找到target，返回-1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变异\"><a href=\"#变异\" class=\"headerlink\" title=\"变异\"></a>变异</h3><blockquote>\n<p>假如数列中出现了重复项，那我们查到的index便不确定，那如何在重复项得到最小的一个位置呢？</p>\n</blockquote>\n<h4 id=\"二分查找-顺序查找\"><a href=\"#二分查找-顺序查找\" class=\"headerlink\" title=\"二分查找 + 顺序查找\"></a>二分查找 + 顺序查找</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRepeatIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//这里做一改变</span></span><br><span class=\"line\">            <span class=\"comment\">//如果定位到目标值，不立即返回，顺序查找到最靠前的一个</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (mid &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(data[mid] != target) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mid --;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//循环时多-1，返回时加上</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data[mid] &lt; target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的右半部分</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//目标值在数列的左半部分</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果可以找到，left则为对应的索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[left] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二分法到底\"><a href=\"#二分法到底\" class=\"headerlink\" title=\"二分法到底\"></a>二分法到底</h4><blockquote>\n<p>可能大多数考虑到上述的情况就结束了，仔细想想，还可不可以更快一点儿呢，回答是肯定的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRepeatIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = data.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果数组空直接返回，防止数组越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//'&lt;'不是'&lt;=',如果等于会出现死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//关键部位！！！</span></span><br><span class=\"line\">            <span class=\"comment\">//保持要查到的值始终是最小索引的，二分查比顺序查要快</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(data[mid] &gt;= target) &#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果可以找到，left则为对应的索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[left] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>"},{"_content":"#### volatile修饰\n> 变量声明了volatile后，跳过cpu cache步骤，jvm保证每次直接从内存中读取变量\n* volatile声明的变量所有线程可见，即当修改一个变量值会立即更新直接更新内存，读取是也直接从内存中刷新读取\n* volatile声明的变量禁止指令重排序优化\n\n#### volatile性能\n> volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行","source":"_posts/Java.md","raw":"#### volatile修饰\n> 变量声明了volatile后，跳过cpu cache步骤，jvm保证每次直接从内存中读取变量\n* volatile声明的变量所有线程可见，即当修改一个变量值会立即更新直接更新内存，读取是也直接从内存中刷新读取\n* volatile声明的变量禁止指令重排序优化\n\n#### volatile性能\n> volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行","slug":"Java","published":1,"date":"2020-05-20T02:07:34.079Z","updated":"2020-05-20T02:16:31.848Z","title":"Java","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzha20002i5nghvtb6g89","content":"<h4 id=\"volatile修饰\"><a href=\"#volatile修饰\" class=\"headerlink\" title=\"volatile修饰\"></a>volatile修饰</h4><blockquote>\n<p>变量声明了volatile后，跳过cpu cache步骤，jvm保证每次直接从内存中读取变量</p>\n</blockquote>\n<ul>\n<li>volatile声明的变量所有线程可见，即当修改一个变量值会立即更新直接更新内存，读取是也直接从内存中刷新读取</li>\n<li>volatile声明的变量禁止指令重排序优化</li>\n</ul>\n<h4 id=\"volatile性能\"><a href=\"#volatile性能\" class=\"headerlink\" title=\"volatile性能\"></a>volatile性能</h4><blockquote>\n<p>volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"volatile修饰\"><a href=\"#volatile修饰\" class=\"headerlink\" title=\"volatile修饰\"></a>volatile修饰</h4><blockquote>\n<p>变量声明了volatile后，跳过cpu cache步骤，jvm保证每次直接从内存中读取变量</p>\n</blockquote>\n<ul>\n<li>volatile声明的变量所有线程可见，即当修改一个变量值会立即更新直接更新内存，读取是也直接从内存中刷新读取</li>\n<li>volatile声明的变量禁止指令重排序优化</li>\n</ul>\n<h4 id=\"volatile性能\"><a href=\"#volatile性能\" class=\"headerlink\" title=\"volatile性能\"></a>volatile性能</h4><blockquote>\n<p>volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行</p>\n</blockquote>\n"},{"title":"爬楼梯","date":"2020-08-11T08:32:52.000Z","_content":"\n### 题目描述(leetcode 70)\n> 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n注意：给定 n 是一个正整数。\n\n    不建议使用递归，当n很大的时候，递归会超时！\n\n<!--more-->\n#### 解法一：流处理\n```java\nclass Solution {\n    public int climbStairs(int n) {\n        int[] res =  Stream\n                .iterate(new int[]{1, 2}, f -> new int[]{f[1], f[0] + f[1]})\n                .limit(n)\n                .mapToInt(f -> f[0])\n                .toArray();\n        return res[res.length - 1];\n    }\n}\n```\n\n#### 解法二：迭代\n```java\nclass Solution {\n    public int climbStairs(int n) {\n        if(n <= 2) {\n            return n;\n        }\n        int first = 0, second = 1;\n        while(n-- != 0) {\n            int tmp = second;\n            second = first + second;\n            first = tmp;\n        }\n        return second;\n    }\n}\n```","source":"_posts/alg-fibonacci.md","raw":"---\ntitle: 爬楼梯\ntags:\n  - leetcode\n  - 面试题\ncategories:\n  - 算法\ndate: 2020-08-11 16:32:52\n---\n\n### 题目描述(leetcode 70)\n> 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n注意：给定 n 是一个正整数。\n\n    不建议使用递归，当n很大的时候，递归会超时！\n\n<!--more-->\n#### 解法一：流处理\n```java\nclass Solution {\n    public int climbStairs(int n) {\n        int[] res =  Stream\n                .iterate(new int[]{1, 2}, f -> new int[]{f[1], f[0] + f[1]})\n                .limit(n)\n                .mapToInt(f -> f[0])\n                .toArray();\n        return res[res.length - 1];\n    }\n}\n```\n\n#### 解法二：迭代\n```java\nclass Solution {\n    public int climbStairs(int n) {\n        if(n <= 2) {\n            return n;\n        }\n        int first = 0, second = 1;\n        while(n-- != 0) {\n            int tmp = second;\n            second = first + second;\n            first = tmp;\n        }\n        return second;\n    }\n}\n```","slug":"alg-fibonacci","published":1,"updated":"2020-08-11T08:39:35.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzha80006i5nga4a51juc","content":"<h3 id=\"题目描述-leetcode-70\"><a href=\"#题目描述-leetcode-70\" class=\"headerlink\" title=\"题目描述(leetcode 70)\"></a>题目描述(leetcode 70)</h3><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>\n</blockquote>\n<pre><code>不建议使用递归，当n很大的时候，递归会超时！</code></pre><a id=\"more\"></a>\n<h4 id=\"解法一：流处理\"><a href=\"#解法一：流处理\" class=\"headerlink\" title=\"解法一：流处理\"></a>解法一：流处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res =  Stream</span><br><span class=\"line\">                .iterate(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, f -&gt; <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;f[<span class=\"number\">1</span>], f[<span class=\"number\">0</span>] + f[<span class=\"number\">1</span>]&#125;)</span><br><span class=\"line\">                .limit(n)</span><br><span class=\"line\">                .mapToInt(f -&gt; f[<span class=\"number\">0</span>])</span><br><span class=\"line\">                .toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[res.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解法二：迭代\"><a href=\"#解法二：迭代\" class=\"headerlink\" title=\"解法二：迭代\"></a>解法二：迭代</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = <span class=\"number\">0</span>, second = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = second;</span><br><span class=\"line\">            second = first + second;</span><br><span class=\"line\">            first = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"题目描述-leetcode-70\"><a href=\"#题目描述-leetcode-70\" class=\"headerlink\" title=\"题目描述(leetcode 70)\"></a>题目描述(leetcode 70)</h3><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>\n</blockquote>\n<pre><code>不建议使用递归，当n很大的时候，递归会超时！</code></pre>","more":"<h4 id=\"解法一：流处理\"><a href=\"#解法一：流处理\" class=\"headerlink\" title=\"解法一：流处理\"></a>解法一：流处理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res =  Stream</span><br><span class=\"line\">                .iterate(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, f -&gt; <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;f[<span class=\"number\">1</span>], f[<span class=\"number\">0</span>] + f[<span class=\"number\">1</span>]&#125;)</span><br><span class=\"line\">                .limit(n)</span><br><span class=\"line\">                .mapToInt(f -&gt; f[<span class=\"number\">0</span>])</span><br><span class=\"line\">                .toArray();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[res.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解法二：迭代\"><a href=\"#解法二：迭代\" class=\"headerlink\" title=\"解法二：迭代\"></a>解法二：迭代</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = <span class=\"number\">0</span>, second = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = second;</span><br><span class=\"line\">            second = first + second;</span><br><span class=\"line\">            first = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"整数反转","date":"2020-06-13T05:14:04.000Z","_content":"\n### 题目 \n[力扣](https://leetcode-cn.com/problems/reverse-integer/)\n> Given a 32-bit signed integer, reverse digits of an integer.\n> 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n<!--more-->\n### 分析\n> 整数反转当然容易，但是要注意的是32位，溢出问题怎么处理？这里提供三种方式：**String**、**Long**、**Int**(***推荐***)\n\n### 方法一：String\n> 利用StringBuffer 的reverse()方法，进行逆置\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        //非负数标记，false为负数\n        boolean flag = true;\n        if(x < 0) {\n            //如果x为-2147483648，-x超过Integer.MAX_VALUE\n            if(x == Integer.MIN_VALUE) {\n                return 0;\n            }\n            flag = false;\n            x = -x;\n        }\n        //如果为负数，加-号\n        String str = flag ? new StringBuffer(String.valueOf(x)).reverse().toString() : \"-\" + new StringBuffer(String.valueOf(x)).reverse();\n\n        //判断是否超过Integer值范围\n        if(Long.valueOf(str) > Integer.MAX_VALUE || Long.valueOf(str) < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return Integer.valueOf(str);\n    }\n}\n```\n\n### 方法二：Long\n> 用Long值存下,对long值进行反转，最后再判断范围\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        Long result = 0L;\n        //不断的取x的最后一位，加到result后面\n        while(x != 0) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n\n        //判断是否超过Integer值范围\n        if(result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return result.intValue();\n    }\n}\n```\n\n### 方法三：Int\n> 以上两种方法都可以很好的解决这个问题，但是我们反思一下，或者我们来强制的加个条件，如果在运行中只能使用32位的整数，该怎么办呢？虽然现在的内存已经不宝贵了，但是我们还是要爱惜一下嘛～\n> 那么更好的方法来了，这个题的关键就是输入值x在反转的过程中可能会超过int值的范围，那我们在循环的取数的时候，每次去判断下一个值是否会超过int的范围，这不就OK了\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        int result = 0;\n        //不断的取x的最后一位，加到result后面\n        while(x != 0) {\n            int pop = x % 10;\n            x /= 10;\n            //判断是否超过Integer值范围\n            if(result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && pop > Integer.MAX_VALUE % 10)) {\n                return 0;\n            }\n            if(result < Integer.MIN_VALUE / 10 || (result == Integer.MIN_VALUE / 10 && pop < Integer.MIN_VALUE % 10)) {\n                return 0;\n            }\n            result = result * 10 + pop;\n        }\n        return result;\n    }\n}\n```\n\n----------------------","source":"_posts/alg-reverse-integer.md","raw":"---\ntitle: 整数反转\ndate: 2020-06-13 13:14:04\ntags:\n- leetcode\n- algorithm\n- 面试题\ncategories:\n- 算法\n---\n\n### 题目 \n[力扣](https://leetcode-cn.com/problems/reverse-integer/)\n> Given a 32-bit signed integer, reverse digits of an integer.\n> 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n<!--more-->\n### 分析\n> 整数反转当然容易，但是要注意的是32位，溢出问题怎么处理？这里提供三种方式：**String**、**Long**、**Int**(***推荐***)\n\n### 方法一：String\n> 利用StringBuffer 的reverse()方法，进行逆置\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        //非负数标记，false为负数\n        boolean flag = true;\n        if(x < 0) {\n            //如果x为-2147483648，-x超过Integer.MAX_VALUE\n            if(x == Integer.MIN_VALUE) {\n                return 0;\n            }\n            flag = false;\n            x = -x;\n        }\n        //如果为负数，加-号\n        String str = flag ? new StringBuffer(String.valueOf(x)).reverse().toString() : \"-\" + new StringBuffer(String.valueOf(x)).reverse();\n\n        //判断是否超过Integer值范围\n        if(Long.valueOf(str) > Integer.MAX_VALUE || Long.valueOf(str) < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return Integer.valueOf(str);\n    }\n}\n```\n\n### 方法二：Long\n> 用Long值存下,对long值进行反转，最后再判断范围\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        Long result = 0L;\n        //不断的取x的最后一位，加到result后面\n        while(x != 0) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n\n        //判断是否超过Integer值范围\n        if(result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return result.intValue();\n    }\n}\n```\n\n### 方法三：Int\n> 以上两种方法都可以很好的解决这个问题，但是我们反思一下，或者我们来强制的加个条件，如果在运行中只能使用32位的整数，该怎么办呢？虽然现在的内存已经不宝贵了，但是我们还是要爱惜一下嘛～\n> 那么更好的方法来了，这个题的关键就是输入值x在反转的过程中可能会超过int值的范围，那我们在循环的取数的时候，每次去判断下一个值是否会超过int的范围，这不就OK了\n\n```java\nclass Solution {\n    public int reverse(int x) {\n        int result = 0;\n        //不断的取x的最后一位，加到result后面\n        while(x != 0) {\n            int pop = x % 10;\n            x /= 10;\n            //判断是否超过Integer值范围\n            if(result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && pop > Integer.MAX_VALUE % 10)) {\n                return 0;\n            }\n            if(result < Integer.MIN_VALUE / 10 || (result == Integer.MIN_VALUE / 10 && pop < Integer.MIN_VALUE % 10)) {\n                return 0;\n            }\n            result = result * 10 + pop;\n        }\n        return result;\n    }\n}\n```\n\n----------------------","slug":"alg-reverse-integer","published":1,"updated":"2020-06-20T07:29:36.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhaa0008i5ngab8s9ik0","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">力扣</a></p>\n<blockquote>\n<p>Given a 32-bit signed integer, reverse digits of an integer.<br>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>整数反转当然容易，但是要注意的是32位，溢出问题怎么处理？这里提供三种方式：<strong>String</strong>、<strong>Long</strong>、<strong>Int</strong>(<strong><em>推荐</em></strong>)</p>\n</blockquote>\n<h3 id=\"方法一：String\"><a href=\"#方法一：String\" class=\"headerlink\" title=\"方法一：String\"></a>方法一：String</h3><blockquote>\n<p>利用StringBuffer 的reverse()方法，进行逆置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//非负数标记，false为负数</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果x为-2147483648，-x超过Integer.MAX_VALUE</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            x = -x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果为负数，加-号</span></span><br><span class=\"line\">        String str = flag ? <span class=\"keyword\">new</span> StringBuffer(String.valueOf(x)).reverse().toString() : <span class=\"string\">\"-\"</span> + <span class=\"keyword\">new</span> StringBuffer(String.valueOf(x)).reverse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Long.valueOf(str) &gt; Integer.MAX_VALUE || Long.valueOf(str) &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.valueOf(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二：Long\"><a href=\"#方法二：Long\" class=\"headerlink\" title=\"方法二：Long\"></a>方法二：Long</h3><blockquote>\n<p>用Long值存下,对long值进行反转，最后再判断范围</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        Long result = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不断的取x的最后一位，加到result后面</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = result * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三：Int\"><a href=\"#方法三：Int\" class=\"headerlink\" title=\"方法三：Int\"></a>方法三：Int</h3><blockquote>\n<p>以上两种方法都可以很好的解决这个问题，但是我们反思一下，或者我们来强制的加个条件，如果在运行中只能使用32位的整数，该怎么办呢？虽然现在的内存已经不宝贵了，但是我们还是要爱惜一下嘛～<br>那么更好的方法来了，这个题的关键就是输入值x在反转的过程中可能会超过int值的范围，那我们在循环的取数的时候，每次去判断下一个值是否会超过int的范围，这不就OK了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不断的取x的最后一位，加到result后面</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pop = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (result == Integer.MAX_VALUE / <span class=\"number\">10</span> &amp;&amp; pop &gt; Integer.MAX_VALUE % <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result &lt; Integer.MIN_VALUE / <span class=\"number\">10</span> || (result == Integer.MIN_VALUE / <span class=\"number\">10</span> &amp;&amp; pop &lt; Integer.MIN_VALUE % <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = result * <span class=\"number\">10</span> + pop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">力扣</a></p>\n<blockquote>\n<p>Given a 32-bit signed integer, reverse digits of an integer.<br>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n</blockquote>","more":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><blockquote>\n<p>整数反转当然容易，但是要注意的是32位，溢出问题怎么处理？这里提供三种方式：<strong>String</strong>、<strong>Long</strong>、<strong>Int</strong>(<strong><em>推荐</em></strong>)</p>\n</blockquote>\n<h3 id=\"方法一：String\"><a href=\"#方法一：String\" class=\"headerlink\" title=\"方法一：String\"></a>方法一：String</h3><blockquote>\n<p>利用StringBuffer 的reverse()方法，进行逆置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//非负数标记，false为负数</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果x为-2147483648，-x超过Integer.MAX_VALUE</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            x = -x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果为负数，加-号</span></span><br><span class=\"line\">        String str = flag ? <span class=\"keyword\">new</span> StringBuffer(String.valueOf(x)).reverse().toString() : <span class=\"string\">\"-\"</span> + <span class=\"keyword\">new</span> StringBuffer(String.valueOf(x)).reverse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Long.valueOf(str) &gt; Integer.MAX_VALUE || Long.valueOf(str) &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.valueOf(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二：Long\"><a href=\"#方法二：Long\" class=\"headerlink\" title=\"方法二：Long\"></a>方法二：Long</h3><blockquote>\n<p>用Long值存下,对long值进行反转，最后再判断范围</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        Long result = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不断的取x的最后一位，加到result后面</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = result * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三：Int\"><a href=\"#方法三：Int\" class=\"headerlink\" title=\"方法三：Int\"></a>方法三：Int</h3><blockquote>\n<p>以上两种方法都可以很好的解决这个问题，但是我们反思一下，或者我们来强制的加个条件，如果在运行中只能使用32位的整数，该怎么办呢？虽然现在的内存已经不宝贵了，但是我们还是要爱惜一下嘛～<br>那么更好的方法来了，这个题的关键就是输入值x在反转的过程中可能会超过int值的范围，那我们在循环的取数的时候，每次去判断下一个值是否会超过int的范围，这不就OK了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不断的取x的最后一位，加到result后面</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pop = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否超过Integer值范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || (result == Integer.MAX_VALUE / <span class=\"number\">10</span> &amp;&amp; pop &gt; Integer.MAX_VALUE % <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result &lt; Integer.MIN_VALUE / <span class=\"number\">10</span> || (result == Integer.MIN_VALUE / <span class=\"number\">10</span> &amp;&amp; pop &lt; Integer.MIN_VALUE % <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = result * <span class=\"number\">10</span> + pop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>"},{"title":"链表逆置","date":"2020-06-12T12:00:04.000Z","_content":"\n### 链表逆置\n> 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n示例：\n> 输入: 1->2->3->4->5->NULL\n> 输出: 5->4->3->2->1->NULL\n\n<!--more-->\n### 解题\n> 头插法简单明了 [code](https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/)\n```\npublic class ReverseList {\n    /**\n     * Definition for singly-linked list.\n     */\n    public static class ListNode {\n        int val;\n        ListNode next;\n\n        ListNode(int x) {\n            val = x;\n        }\n    }\n\n    public ListNode getReverseList(ListNode head) {\n        //定义一个空的头节点\n        ListNode newList = new ListNode(-1);\n        while (head != null) {\n            //定一个临时指针，指向下一个节点\n            ListNode nextNode = head.next;\n            //断开当前节点与下一个节点连接，并接到新链表的前面\n            head.next = newList.next;\n            //当前节点插入到头节点之后（头插法）\n            newList.next = head;\n            //当前节点向后移\n            head = nextNode;\n        }\n        return newList.next;\n    }\n}\n```\n\n------------------","source":"_posts/alg-reverse-list.md","raw":"---\ntitle: 链表逆置\ndate: 2020-06-12 20:00:04\ntags:\n- leetcode\n- algorithm\n- 面试题\ncategories:\n- 算法\n---\n\n### 链表逆置\n> 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n示例：\n> 输入: 1->2->3->4->5->NULL\n> 输出: 5->4->3->2->1->NULL\n\n<!--more-->\n### 解题\n> 头插法简单明了 [code](https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/)\n```\npublic class ReverseList {\n    /**\n     * Definition for singly-linked list.\n     */\n    public static class ListNode {\n        int val;\n        ListNode next;\n\n        ListNode(int x) {\n            val = x;\n        }\n    }\n\n    public ListNode getReverseList(ListNode head) {\n        //定义一个空的头节点\n        ListNode newList = new ListNode(-1);\n        while (head != null) {\n            //定一个临时指针，指向下一个节点\n            ListNode nextNode = head.next;\n            //断开当前节点与下一个节点连接，并接到新链表的前面\n            head.next = newList.next;\n            //当前节点插入到头节点之后（头插法）\n            newList.next = head;\n            //当前节点向后移\n            head = nextNode;\n        }\n        return newList.next;\n    }\n}\n```\n\n------------------","slug":"alg-reverse-list","published":1,"updated":"2020-06-20T03:34:49.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhaa0009i5ng5mk0drey","content":"<h3 id=\"链表逆置\"><a href=\"#链表逆置\" class=\"headerlink\" title=\"链表逆置\"></a>链表逆置</h3><blockquote>\n<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h3><blockquote>\n<p>头插法简单明了 <a href=\"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">code</a></p>\n</blockquote>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">        int val;</span><br><span class=\"line\">        ListNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode(int x) &#123;</span><br><span class=\"line\">            val = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode getReverseList(ListNode head) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个空的头节点</span></span><br><span class=\"line\">        ListNode <span class=\"keyword\">new</span><span class=\"type\">List</span> = <span class=\"keyword\">new</span> <span class=\"type\">ListNode</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定一个临时指针，指向下一个节点</span></span><br><span class=\"line\">            ListNode nextNode = head.next;</span><br><span class=\"line\">            <span class=\"comment\">//断开当前节点与下一个节点连接，并接到新链表的前面</span></span><br><span class=\"line\">            head.next = <span class=\"keyword\">new</span><span class=\"type\">List</span>.next;</span><br><span class=\"line\">            <span class=\"comment\">//当前节点插入到头节点之后（头插法）</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">List</span>.next = head;</span><br><span class=\"line\">            <span class=\"comment\">//当前节点向后移</span></span><br><span class=\"line\">            head = nextNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">List</span>.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"链表逆置\"><a href=\"#链表逆置\" class=\"headerlink\" title=\"链表逆置\"></a>链表逆置</h3><blockquote>\n<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>\n</blockquote>","more":"<h3 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h3><blockquote>\n<p>头插法简单明了 <a href=\"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/\" target=\"_blank\" rel=\"noopener\">code</a></p>\n</blockquote>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReverseList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">        int val;</span><br><span class=\"line\">        ListNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode(int x) &#123;</span><br><span class=\"line\">            val = x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode getReverseList(ListNode head) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个空的头节点</span></span><br><span class=\"line\">        ListNode <span class=\"keyword\">new</span><span class=\"type\">List</span> = <span class=\"keyword\">new</span> <span class=\"type\">ListNode</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定一个临时指针，指向下一个节点</span></span><br><span class=\"line\">            ListNode nextNode = head.next;</span><br><span class=\"line\">            <span class=\"comment\">//断开当前节点与下一个节点连接，并接到新链表的前面</span></span><br><span class=\"line\">            head.next = <span class=\"keyword\">new</span><span class=\"type\">List</span>.next;</span><br><span class=\"line\">            <span class=\"comment\">//当前节点插入到头节点之后（头插法）</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">List</span>.next = head;</span><br><span class=\"line\">            <span class=\"comment\">//当前节点向后移</span></span><br><span class=\"line\">            head = nextNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">List</span>.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>"},{"title":"进程通信","date":"2020-06-20T03:06:47.000Z","_content":"#### 摘要\n-------------------\n > 我们在面试中常常被问到进程通信的方式有哪些，感觉与我们平时的开发工作没有关系，其实我们也是一直在用它\n\n\n#### 进程通信方式\n-----------------\n> 1、管道（pipe）\n        管道又分为无名管道（即匿名管道）和有名管道\n        其实我们平时经常用到无名管道，在Linux命令中\"|\"就是无名管道的使用，\n        他将一个进程的输出传入到另一个进程中，比如：\n        ```\n        cat xxxlog | grep \"xxx\"\n        ```\n        有名管道可以通过 mkfifo <pipename> 命令创建\n        ```\n        mkfifo pipe\n        ```\n\n> 2、消息队列\n<!--more-->\n        注意，这个消息队列不是我们常说的MQ，Kafka、RocketMQ、RabbitMQ等\n>消息队列提供了一种从一个进程发送到另一个进程的数据块的方法，\n但是像有名管道一样，消息队列的数据最大长度是有限的，这个也是这种进程通信的一个缺点\n再多的，我也不清楚了，，，请各路神仙指教了\n\n> 3、共享内存\n        共享内存的实质是每个进程都有自己的一个虚拟空间，而不是真实的物理空间，每个线程将自己的虚拟的内存空间指向真实的物理空间，这样其中有一部分的内存空间指向的就是同一块物理空间，这就完成了内存共享的机制；\n\n> 4、信号量\n        我们回想内存共享的缺点是什么？就是当多个进程竞争资源怎么办，就类似于多线程的并发问题。\n        这个时候信号量就派上用场了。\n        信号量本身是个计数器，用来控制进程之间的互斥和同步，通过信号量的值来控制进程对内存的访问，从而解决了多个进程竞争内存的问题。\n\n> 5、Socket\n        套接字就是我们现在在使用的进程通信方式，我们在使用通信工具比如QQ、微信APP和客户端之间的通信就是使用Socket进行通信的。\n\n#### 总结\n        进程之间的通信方式有几种\n\n+ 管道\n+ 消息队列\n+ 内存共享\n+ 信号量\n+ Socket\n\n\n---------------\n","source":"_posts/net-IPC.md","raw":"---\ntitle: 进程通信\ntags:\n  - 进程通信\n  - 面试题\ncategories:\n  - 计算机网络\ndate: 2020-06-20 11:06:47\n---\n#### 摘要\n-------------------\n > 我们在面试中常常被问到进程通信的方式有哪些，感觉与我们平时的开发工作没有关系，其实我们也是一直在用它\n\n\n#### 进程通信方式\n-----------------\n> 1、管道（pipe）\n        管道又分为无名管道（即匿名管道）和有名管道\n        其实我们平时经常用到无名管道，在Linux命令中\"|\"就是无名管道的使用，\n        他将一个进程的输出传入到另一个进程中，比如：\n        ```\n        cat xxxlog | grep \"xxx\"\n        ```\n        有名管道可以通过 mkfifo <pipename> 命令创建\n        ```\n        mkfifo pipe\n        ```\n\n> 2、消息队列\n<!--more-->\n        注意，这个消息队列不是我们常说的MQ，Kafka、RocketMQ、RabbitMQ等\n>消息队列提供了一种从一个进程发送到另一个进程的数据块的方法，\n但是像有名管道一样，消息队列的数据最大长度是有限的，这个也是这种进程通信的一个缺点\n再多的，我也不清楚了，，，请各路神仙指教了\n\n> 3、共享内存\n        共享内存的实质是每个进程都有自己的一个虚拟空间，而不是真实的物理空间，每个线程将自己的虚拟的内存空间指向真实的物理空间，这样其中有一部分的内存空间指向的就是同一块物理空间，这就完成了内存共享的机制；\n\n> 4、信号量\n        我们回想内存共享的缺点是什么？就是当多个进程竞争资源怎么办，就类似于多线程的并发问题。\n        这个时候信号量就派上用场了。\n        信号量本身是个计数器，用来控制进程之间的互斥和同步，通过信号量的值来控制进程对内存的访问，从而解决了多个进程竞争内存的问题。\n\n> 5、Socket\n        套接字就是我们现在在使用的进程通信方式，我们在使用通信工具比如QQ、微信APP和客户端之间的通信就是使用Socket进行通信的。\n\n#### 总结\n        进程之间的通信方式有几种\n\n+ 管道\n+ 消息队列\n+ 内存共享\n+ 信号量\n+ Socket\n\n\n---------------\n","slug":"net-IPC","published":1,"updated":"2020-06-20T07:34:28.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhad000ci5ngd0szhnau","content":"<h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><hr>\n<blockquote>\n<p>我们在面试中常常被问到进程通信的方式有哪些，感觉与我们平时的开发工作没有关系，其实我们也是一直在用它</p>\n</blockquote>\n<h4 id=\"进程通信方式\"><a href=\"#进程通信方式\" class=\"headerlink\" title=\"进程通信方式\"></a>进程通信方式</h4><hr>\n<blockquote>\n<p>1、管道（pipe）<br>        管道又分为无名管道（即匿名管道）和有名管道<br>        其实我们平时经常用到无名管道，在Linux命令中”|”就是无名管道的使用，<br>        他将一个进程的输出传入到另一个进程中，比如：<br>        <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cat</span> xxxlog | <span class=\"keyword\">grep</span> <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure><br>        有名管道可以通过 mkfifo <pipename> 命令创建<br>        <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mkfifo pipe</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>2、消息队列</p>\n</blockquote>\n<a id=\"more\"></a>\n<pre><code>注意，这个消息队列不是我们常说的MQ，Kafka、RocketMQ、RabbitMQ等</code></pre><blockquote>\n<p>消息队列提供了一种从一个进程发送到另一个进程的数据块的方法，<br>但是像有名管道一样，消息队列的数据最大长度是有限的，这个也是这种进程通信的一个缺点<br>再多的，我也不清楚了，，，请各路神仙指教了</p>\n</blockquote>\n<blockquote>\n<p>3、共享内存<br>        共享内存的实质是每个进程都有自己的一个虚拟空间，而不是真实的物理空间，每个线程将自己的虚拟的内存空间指向真实的物理空间，这样其中有一部分的内存空间指向的就是同一块物理空间，这就完成了内存共享的机制；</p>\n</blockquote>\n<blockquote>\n<p>4、信号量<br>        我们回想内存共享的缺点是什么？就是当多个进程竞争资源怎么办，就类似于多线程的并发问题。<br>        这个时候信号量就派上用场了。<br>        信号量本身是个计数器，用来控制进程之间的互斥和同步，通过信号量的值来控制进程对内存的访问，从而解决了多个进程竞争内存的问题。</p>\n</blockquote>\n<blockquote>\n<p>5、Socket<br>        套接字就是我们现在在使用的进程通信方式，我们在使用通信工具比如QQ、微信APP和客户端之间的通信就是使用Socket进行通信的。</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>进程之间的通信方式有几种</code></pre><ul>\n<li>管道</li>\n<li>消息队列</li>\n<li>内存共享</li>\n<li>信号量</li>\n<li>Socket</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><hr>\n<blockquote>\n<p>我们在面试中常常被问到进程通信的方式有哪些，感觉与我们平时的开发工作没有关系，其实我们也是一直在用它</p>\n</blockquote>\n<h4 id=\"进程通信方式\"><a href=\"#进程通信方式\" class=\"headerlink\" title=\"进程通信方式\"></a>进程通信方式</h4><hr>\n<blockquote>\n<p>1、管道（pipe）<br>        管道又分为无名管道（即匿名管道）和有名管道<br>        其实我们平时经常用到无名管道，在Linux命令中”|”就是无名管道的使用，<br>        他将一个进程的输出传入到另一个进程中，比如：<br>        <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cat</span> xxxlog | <span class=\"keyword\">grep</span> <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure><br>        有名管道可以通过 mkfifo <pipename> 命令创建<br>        <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mkfifo pipe</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>2、消息队列</p>\n</blockquote>","more":"<pre><code>注意，这个消息队列不是我们常说的MQ，Kafka、RocketMQ、RabbitMQ等</code></pre><blockquote>\n<p>消息队列提供了一种从一个进程发送到另一个进程的数据块的方法，<br>但是像有名管道一样，消息队列的数据最大长度是有限的，这个也是这种进程通信的一个缺点<br>再多的，我也不清楚了，，，请各路神仙指教了</p>\n</blockquote>\n<blockquote>\n<p>3、共享内存<br>        共享内存的实质是每个进程都有自己的一个虚拟空间，而不是真实的物理空间，每个线程将自己的虚拟的内存空间指向真实的物理空间，这样其中有一部分的内存空间指向的就是同一块物理空间，这就完成了内存共享的机制；</p>\n</blockquote>\n<blockquote>\n<p>4、信号量<br>        我们回想内存共享的缺点是什么？就是当多个进程竞争资源怎么办，就类似于多线程的并发问题。<br>        这个时候信号量就派上用场了。<br>        信号量本身是个计数器，用来控制进程之间的互斥和同步，通过信号量的值来控制进程对内存的访问，从而解决了多个进程竞争内存的问题。</p>\n</blockquote>\n<blockquote>\n<p>5、Socket<br>        套接字就是我们现在在使用的进程通信方式，我们在使用通信工具比如QQ、微信APP和客户端之间的通信就是使用Socket进行通信的。</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>进程之间的通信方式有几种</code></pre><ul>\n<li>管道</li>\n<li>消息队列</li>\n<li>内存共享</li>\n<li>信号量</li>\n<li>Socket</li>\n</ul>\n<hr>"},{"title":"java面试图谱","date":"2020-06-16T01:06:35.000Z","_content":"\n> 简单列出Java面试图谱，仅供参考！\n\n<img src=\"/images/Java开发知识储备.png\" width=\"90%\">\n<!--more-->","source":"_posts/java-interview.md","raw":"---\ntitle: java面试图谱\ntags:\n  - Java面试\n  - 图谱\ncategories:\n  - Java面试图谱\ndate: 2020-06-16 09:06:35\n---\n\n> 简单列出Java面试图谱，仅供参考！\n\n<img src=\"/images/Java开发知识储备.png\" width=\"90%\">\n<!--more-->","slug":"java-interview","published":1,"updated":"2020-06-20T03:58:05.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhae000di5ngfj0q4bub","content":"<blockquote>\n<p>简单列出Java面试图谱，仅供参考！</p>\n</blockquote>\n<img src=\"/images/Java开发知识储备.png\" width=\"90%\">\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<blockquote>\n<p>简单列出Java面试图谱，仅供参考！</p>\n</blockquote>\n<img src=\"/images/Java开发知识储备.png\" width=\"90%\">","more":""},{"title":"DOS攻击","date":"2020-06-13T11:00:04.000Z","_content":"\n### [什么是DOS攻击](https://baike.baidu.com/item/dos%E6%94%BB%E5%87%BB/3792374?fr=aladdin)\n> DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络宽带攻击和连通性攻击。\n<!--more-->\n> 说白了就是机器单挑，比谁的机器性能好、速度快\n> 但是这种方式已经很远古了，毕竟计算机在迅速发展，性能也在不断提升，比如一个黑客用自己的机器，每秒钟发送10个伪装的数据包，但是被攻击的网站背后有十几台机器，每秒可以接受成百上千的数据，这时候攻击就无济于事了，反而会偷鸡不成蚀把米，自己的机器很可能会宕机。\n\n### 什么是DDOS\n> 分布式拒绝服务攻击，简单说就是群殴，技术在发展，黑客也在学习，ddos就是黑客利用多台 “**肉鸡**”（就是可以被远程控制的多台机器），对某一网站进行攻击，可能每台机器每秒发送10个数据包，成群的 **肉鸡** 便可以每秒钟发出成百上千的伪装的攻击数据包，这个时候就很难抵挡了。到目前为止，防止这种攻击还是很吃力的。\n\n### 攻击方式\n> 我们了解了什么事dos，什么事ddos, 那么他们是怎么攻击的呢，原理是什么？？？\n> 按照原理，简单来说以下几种：\n>  1.比如IP为1.1.1.1的地址是合法用户，黑客可以把自己的IP伪装成1.1.1.1，向服务器发送一个带有RST位的TCP数据段，服务器接收到之后认为该链接有错误，便会清除缓冲区建立好的连接，这时合法用户再去访问只能重新建立连接。\n>  2.向服务器发送大量的毫无用处的UDP数据包，占满带宽，导致网络可用带宽占满，最终导致服务器瘫痪。\n\n\n----------------------","source":"_posts/net-dos.md","raw":"---\ntitle: DOS攻击\ndate: 2020-06-13 19:00:04\ntags:\n- 网络\n- 面试题\n- dos\ncategories:\n- 计算机网络\n---\n\n### [什么是DOS攻击](https://baike.baidu.com/item/dos%E6%94%BB%E5%87%BB/3792374?fr=aladdin)\n> DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络宽带攻击和连通性攻击。\n<!--more-->\n> 说白了就是机器单挑，比谁的机器性能好、速度快\n> 但是这种方式已经很远古了，毕竟计算机在迅速发展，性能也在不断提升，比如一个黑客用自己的机器，每秒钟发送10个伪装的数据包，但是被攻击的网站背后有十几台机器，每秒可以接受成百上千的数据，这时候攻击就无济于事了，反而会偷鸡不成蚀把米，自己的机器很可能会宕机。\n\n### 什么是DDOS\n> 分布式拒绝服务攻击，简单说就是群殴，技术在发展，黑客也在学习，ddos就是黑客利用多台 “**肉鸡**”（就是可以被远程控制的多台机器），对某一网站进行攻击，可能每台机器每秒发送10个数据包，成群的 **肉鸡** 便可以每秒钟发出成百上千的伪装的攻击数据包，这个时候就很难抵挡了。到目前为止，防止这种攻击还是很吃力的。\n\n### 攻击方式\n> 我们了解了什么事dos，什么事ddos, 那么他们是怎么攻击的呢，原理是什么？？？\n> 按照原理，简单来说以下几种：\n>  1.比如IP为1.1.1.1的地址是合法用户，黑客可以把自己的IP伪装成1.1.1.1，向服务器发送一个带有RST位的TCP数据段，服务器接收到之后认为该链接有错误，便会清除缓冲区建立好的连接，这时合法用户再去访问只能重新建立连接。\n>  2.向服务器发送大量的毫无用处的UDP数据包，占满带宽，导致网络可用带宽占满，最终导致服务器瘫痪。\n\n\n----------------------","slug":"net-dos","published":1,"updated":"2020-06-15T02:17:37.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhag000hi5ng5fe9ci3c","content":"<h3 id=\"什么是DOS攻击\"><a href=\"#什么是DOS攻击\" class=\"headerlink\" title=\"什么是DOS攻击\"></a><a href=\"https://baike.baidu.com/item/dos%E6%94%BB%E5%87%BB/3792374?fr=aladdin\" target=\"_blank\" rel=\"noopener\">什么是DOS攻击</a></h3><blockquote>\n<p>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络宽带攻击和连通性攻击。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>说白了就是机器单挑，比谁的机器性能好、速度快<br>但是这种方式已经很远古了，毕竟计算机在迅速发展，性能也在不断提升，比如一个黑客用自己的机器，每秒钟发送10个伪装的数据包，但是被攻击的网站背后有十几台机器，每秒可以接受成百上千的数据，这时候攻击就无济于事了，反而会偷鸡不成蚀把米，自己的机器很可能会宕机。</p>\n</blockquote>\n<h3 id=\"什么是DDOS\"><a href=\"#什么是DDOS\" class=\"headerlink\" title=\"什么是DDOS\"></a>什么是DDOS</h3><blockquote>\n<p>分布式拒绝服务攻击，简单说就是群殴，技术在发展，黑客也在学习，ddos就是黑客利用多台 “<strong>肉鸡</strong>”（就是可以被远程控制的多台机器），对某一网站进行攻击，可能每台机器每秒发送10个数据包，成群的 <strong>肉鸡</strong> 便可以每秒钟发出成百上千的伪装的攻击数据包，这个时候就很难抵挡了。到目前为止，防止这种攻击还是很吃力的。</p>\n</blockquote>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><blockquote>\n<p>我们了解了什么事dos，什么事ddos, 那么他们是怎么攻击的呢，原理是什么？？？<br>按照原理，简单来说以下几种：<br> 1.比如IP为1.1.1.1的地址是合法用户，黑客可以把自己的IP伪装成1.1.1.1，向服务器发送一个带有RST位的TCP数据段，服务器接收到之后认为该链接有错误，便会清除缓冲区建立好的连接，这时合法用户再去访问只能重新建立连接。<br> 2.向服务器发送大量的毫无用处的UDP数据包，占满带宽，导致网络可用带宽占满，最终导致服务器瘫痪。</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是DOS攻击\"><a href=\"#什么是DOS攻击\" class=\"headerlink\" title=\"什么是DOS攻击\"></a><a href=\"https://baike.baidu.com/item/dos%E6%94%BB%E5%87%BB/3792374?fr=aladdin\" target=\"_blank\" rel=\"noopener\">什么是DOS攻击</a></h3><blockquote>\n<p>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络宽带攻击和连通性攻击。</p>\n</blockquote>","more":"<blockquote>\n<p>说白了就是机器单挑，比谁的机器性能好、速度快<br>但是这种方式已经很远古了，毕竟计算机在迅速发展，性能也在不断提升，比如一个黑客用自己的机器，每秒钟发送10个伪装的数据包，但是被攻击的网站背后有十几台机器，每秒可以接受成百上千的数据，这时候攻击就无济于事了，反而会偷鸡不成蚀把米，自己的机器很可能会宕机。</p>\n</blockquote>\n<h3 id=\"什么是DDOS\"><a href=\"#什么是DDOS\" class=\"headerlink\" title=\"什么是DDOS\"></a>什么是DDOS</h3><blockquote>\n<p>分布式拒绝服务攻击，简单说就是群殴，技术在发展，黑客也在学习，ddos就是黑客利用多台 “<strong>肉鸡</strong>”（就是可以被远程控制的多台机器），对某一网站进行攻击，可能每台机器每秒发送10个数据包，成群的 <strong>肉鸡</strong> 便可以每秒钟发出成百上千的伪装的攻击数据包，这个时候就很难抵挡了。到目前为止，防止这种攻击还是很吃力的。</p>\n</blockquote>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><blockquote>\n<p>我们了解了什么事dos，什么事ddos, 那么他们是怎么攻击的呢，原理是什么？？？<br>按照原理，简单来说以下几种：<br> 1.比如IP为1.1.1.1的地址是合法用户，黑客可以把自己的IP伪装成1.1.1.1，向服务器发送一个带有RST位的TCP数据段，服务器接收到之后认为该链接有错误，便会清除缓冲区建立好的连接，这时合法用户再去访问只能重新建立连接。<br> 2.向服务器发送大量的毫无用处的UDP数据包，占满带宽，导致网络可用带宽占满，最终导致服务器瘫痪。</p>\n</blockquote>\n<hr>"},{"title":"三次握手、四次挥手","date":"2020-06-14T14:38:20.000Z","_content":"> ###### 过程如下图\n\n<img src=\"/images/threeAndFour.png\" width=\"80%\">\n<!--more-->\n\n#### 三次握手\n> 在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接，客户端和服务器端是相对的概念，本文我们以客户端向服务器端发送为例。\n\n> **第一次握手：客户端向服务器端发送一个SYN报文，报文中包含了一个动态生成的序列号i（至于为什么动态生成可以自己想想），这时，客户端处于SYN_SEND状态（打开一个连接），表示已向服务器发送了连接请求；**\n\n> **第二次握手：服务器端接收到连接请求，认为可以建起连接，回发一个ACK确认报文，内容将序列号i+1,同时，生成一个序列号j，发送一个SYN报文，内容为序列号j，服务器端处于SYN_REVD状态（连接请求已到达，等待确认），表示等待客户端确认连接；**\n\n> **第三次握手：客户端接收到服务器端的反馈，立马发送一个ACK报文，内容为j+1，便是确认连接，这时客户端状态为establish(正常传输状态)**\n\n> **服务器端接收到ACK报文后，连接建立完成。**\n\n#### 四次挥手\n依然以客户端主动发起断开连接为例。\n> **第一次挥手：客户端主动发起断开请求，动态生成一个序列号M，向服务器发送一个FIN报文，此时，客户端处于FIN_WAIT1状态；**\n\n> **第二次挥手： 服务器端收到客户端的断开请求，发送确认报文ACK(M+1)，告诉客户端，我知道了，等我处理完这波数据，此时服务器状态为CLOSE_WAIT;**\n\n> **第三次挥手： 等服务器处理完，准备要断开连接了，向客户端发送一个FIN报文，伴有动态生成的序列号N，此时服务器状态LAST_ACK;**\n\n> **第四次挥手： 客户端收到服务器发来的断开连接报文，则回复一个ACK报文N+1，表示我确认断开连接，这时客户端处于** ***TIME_WAIT状态*** **，很关键的状态，面试高频出现；**\n\n> **服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。**\n\n###### 扩展\n1. **TIME_WAIT状态**\n        为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，\n        要确保服务器是否已经收到了我们的 ACK 报文，\n        如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。\n        至于 TIME_WAIT 持续的时间至少是一个报文的来回时间。一般会设置一个计时，如果过了这个计时没有再次收到 FIN 报文，则代表对方成功收到 ACK 报文，此时处于 CLOSED 状态。\n\n2. **半连接**\n     **即发送了SYN包还未收到ACK确认包的连接状态为半连接状态，还未完成三次握手TCP连接。**\n\n        半连接队列:在三次握手协议中，服务器维护一个半连接队列；\n        该队列为每个客户端的SYN包(SYN=i)开设一个条目，\n        该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。\n        这些条目所标识的连接在服务器处于SYN_ RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n3. **DOS攻击**\n        因为服务器会维护一个半连接的队列，那如果我们向服务器发送大量伪造的无效的半连接请求，便会消耗cpu和内存，\n        当伪造的SYN包长时间占用半连接队列，正常的SYN请求遍会被抛弃，服务器便面临着网络阻塞甚至系统瘫痪的风险，\n        这也是比较常见的一种DOS攻击方式。\n-----------------\n","source":"_posts/net-three-and-four.md","raw":"---\ntitle: 三次握手、四次挥手\ntags:\n  - internet\n  - 面试题\n  - TCP\ncategories:\n  - 计算机网络\ndate: 2020-06-14 22:38:20\n---\n> ###### 过程如下图\n\n<img src=\"/images/threeAndFour.png\" width=\"80%\">\n<!--more-->\n\n#### 三次握手\n> 在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接，客户端和服务器端是相对的概念，本文我们以客户端向服务器端发送为例。\n\n> **第一次握手：客户端向服务器端发送一个SYN报文，报文中包含了一个动态生成的序列号i（至于为什么动态生成可以自己想想），这时，客户端处于SYN_SEND状态（打开一个连接），表示已向服务器发送了连接请求；**\n\n> **第二次握手：服务器端接收到连接请求，认为可以建起连接，回发一个ACK确认报文，内容将序列号i+1,同时，生成一个序列号j，发送一个SYN报文，内容为序列号j，服务器端处于SYN_REVD状态（连接请求已到达，等待确认），表示等待客户端确认连接；**\n\n> **第三次握手：客户端接收到服务器端的反馈，立马发送一个ACK报文，内容为j+1，便是确认连接，这时客户端状态为establish(正常传输状态)**\n\n> **服务器端接收到ACK报文后，连接建立完成。**\n\n#### 四次挥手\n依然以客户端主动发起断开连接为例。\n> **第一次挥手：客户端主动发起断开请求，动态生成一个序列号M，向服务器发送一个FIN报文，此时，客户端处于FIN_WAIT1状态；**\n\n> **第二次挥手： 服务器端收到客户端的断开请求，发送确认报文ACK(M+1)，告诉客户端，我知道了，等我处理完这波数据，此时服务器状态为CLOSE_WAIT;**\n\n> **第三次挥手： 等服务器处理完，准备要断开连接了，向客户端发送一个FIN报文，伴有动态生成的序列号N，此时服务器状态LAST_ACK;**\n\n> **第四次挥手： 客户端收到服务器发来的断开连接报文，则回复一个ACK报文N+1，表示我确认断开连接，这时客户端处于** ***TIME_WAIT状态*** **，很关键的状态，面试高频出现；**\n\n> **服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。**\n\n###### 扩展\n1. **TIME_WAIT状态**\n        为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，\n        要确保服务器是否已经收到了我们的 ACK 报文，\n        如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。\n        至于 TIME_WAIT 持续的时间至少是一个报文的来回时间。一般会设置一个计时，如果过了这个计时没有再次收到 FIN 报文，则代表对方成功收到 ACK 报文，此时处于 CLOSED 状态。\n\n2. **半连接**\n     **即发送了SYN包还未收到ACK确认包的连接状态为半连接状态，还未完成三次握手TCP连接。**\n\n        半连接队列:在三次握手协议中，服务器维护一个半连接队列；\n        该队列为每个客户端的SYN包(SYN=i)开设一个条目，\n        该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。\n        这些条目所标识的连接在服务器处于SYN_ RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n3. **DOS攻击**\n        因为服务器会维护一个半连接的队列，那如果我们向服务器发送大量伪造的无效的半连接请求，便会消耗cpu和内存，\n        当伪造的SYN包长时间占用半连接队列，正常的SYN请求遍会被抛弃，服务器便面临着网络阻塞甚至系统瘫痪的风险，\n        这也是比较常见的一种DOS攻击方式。\n-----------------\n","slug":"net-three-and-four","published":1,"updated":"2020-06-15T02:17:05.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhag000ji5ng8o2g35a3","content":"<blockquote>\n<h6 id=\"过程如下图\"><a href=\"#过程如下图\" class=\"headerlink\" title=\"过程如下图\"></a>过程如下图</h6></blockquote>\n<img src=\"/images/threeAndFour.png\" width=\"80%\">\n<a id=\"more\"></a>\n\n<h4 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h4><blockquote>\n<p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接，客户端和服务器端是相对的概念，本文我们以客户端向服务器端发送为例。</p>\n</blockquote>\n<blockquote>\n<p><strong>第一次握手：客户端向服务器端发送一个SYN报文，报文中包含了一个动态生成的序列号i（至于为什么动态生成可以自己想想），这时，客户端处于SYN_SEND状态（打开一个连接），表示已向服务器发送了连接请求；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二次握手：服务器端接收到连接请求，认为可以建起连接，回发一个ACK确认报文，内容将序列号i+1,同时，生成一个序列号j，发送一个SYN报文，内容为序列号j，服务器端处于SYN_REVD状态（连接请求已到达，等待确认），表示等待客户端确认连接；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第三次握手：客户端接收到服务器端的反馈，立马发送一个ACK报文，内容为j+1，便是确认连接，这时客户端状态为establish(正常传输状态)</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>服务器端接收到ACK报文后，连接建立完成。</strong></p>\n</blockquote>\n<h4 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h4><p>依然以客户端主动发起断开连接为例。</p>\n<blockquote>\n<p><strong>第一次挥手：客户端主动发起断开请求，动态生成一个序列号M，向服务器发送一个FIN报文，此时，客户端处于FIN_WAIT1状态；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二次挥手： 服务器端收到客户端的断开请求，发送确认报文ACK(M+1)，告诉客户端，我知道了，等我处理完这波数据，此时服务器状态为CLOSE_WAIT;</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第三次挥手： 等服务器处理完，准备要断开连接了，向客户端发送一个FIN报文，伴有动态生成的序列号N，此时服务器状态LAST_ACK;</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第四次挥手： 客户端收到服务器发来的断开连接报文，则回复一个ACK报文N+1，表示我确认断开连接，这时客户端处于</strong> <strong><em>TIME_WAIT状态</em></strong> <strong>，很关键的状态，面试高频出现；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</strong></p>\n</blockquote>\n<h6 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h6><ol>\n<li><p><strong>TIME_WAIT状态</strong></p>\n<pre><code>为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，\n要确保服务器是否已经收到了我们的 ACK 报文，\n如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。\n至于 TIME_WAIT 持续的时间至少是一个报文的来回时间。一般会设置一个计时，如果过了这个计时没有再次收到 FIN 报文，则代表对方成功收到 ACK 报文，此时处于 CLOSED 状态。</code></pre></li>\n<li><p><strong>半连接</strong><br>  <strong>即发送了SYN包还未收到ACK确认包的连接状态为半连接状态，还未完成三次握手TCP连接。</strong></p>\n<pre><code>半连接队列:在三次握手协议中，服务器维护一个半连接队列；\n该队列为每个客户端的SYN包(SYN=i)开设一个条目，\n该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。\n这些条目所标识的连接在服务器处于SYN_ RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</code></pre></li>\n<li><p><strong>DOS攻击</strong></p>\n<pre><code>因为服务器会维护一个半连接的队列，那如果我们向服务器发送大量伪造的无效的半连接请求，便会消耗cpu和内存，\n当伪造的SYN包长时间占用半连接队列，正常的SYN请求遍会被抛弃，服务器便面临着网络阻塞甚至系统瘫痪的风险，\n这也是比较常见的一种DOS攻击方式。</code></pre></li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h6 id=\"过程如下图\"><a href=\"#过程如下图\" class=\"headerlink\" title=\"过程如下图\"></a>过程如下图</h6></blockquote>\n<img src=\"/images/threeAndFour.png\" width=\"80%\">","more":"<h4 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h4><blockquote>\n<p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接，客户端和服务器端是相对的概念，本文我们以客户端向服务器端发送为例。</p>\n</blockquote>\n<blockquote>\n<p><strong>第一次握手：客户端向服务器端发送一个SYN报文，报文中包含了一个动态生成的序列号i（至于为什么动态生成可以自己想想），这时，客户端处于SYN_SEND状态（打开一个连接），表示已向服务器发送了连接请求；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二次握手：服务器端接收到连接请求，认为可以建起连接，回发一个ACK确认报文，内容将序列号i+1,同时，生成一个序列号j，发送一个SYN报文，内容为序列号j，服务器端处于SYN_REVD状态（连接请求已到达，等待确认），表示等待客户端确认连接；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第三次握手：客户端接收到服务器端的反馈，立马发送一个ACK报文，内容为j+1，便是确认连接，这时客户端状态为establish(正常传输状态)</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>服务器端接收到ACK报文后，连接建立完成。</strong></p>\n</blockquote>\n<h4 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h4><p>依然以客户端主动发起断开连接为例。</p>\n<blockquote>\n<p><strong>第一次挥手：客户端主动发起断开请求，动态生成一个序列号M，向服务器发送一个FIN报文，此时，客户端处于FIN_WAIT1状态；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二次挥手： 服务器端收到客户端的断开请求，发送确认报文ACK(M+1)，告诉客户端，我知道了，等我处理完这波数据，此时服务器状态为CLOSE_WAIT;</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第三次挥手： 等服务器处理完，准备要断开连接了，向客户端发送一个FIN报文，伴有动态生成的序列号N，此时服务器状态LAST_ACK;</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第四次挥手： 客户端收到服务器发来的断开连接报文，则回复一个ACK报文N+1，表示我确认断开连接，这时客户端处于</strong> <strong><em>TIME_WAIT状态</em></strong> <strong>，很关键的状态，面试高频出现；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</strong></p>\n</blockquote>\n<h6 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h6><ol>\n<li><p><strong>TIME_WAIT状态</strong></p>\n<pre><code>为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，\n要确保服务器是否已经收到了我们的 ACK 报文，\n如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。\n至于 TIME_WAIT 持续的时间至少是一个报文的来回时间。一般会设置一个计时，如果过了这个计时没有再次收到 FIN 报文，则代表对方成功收到 ACK 报文，此时处于 CLOSED 状态。</code></pre></li>\n<li><p><strong>半连接</strong><br>  <strong>即发送了SYN包还未收到ACK确认包的连接状态为半连接状态，还未完成三次握手TCP连接。</strong></p>\n<pre><code>半连接队列:在三次握手协议中，服务器维护一个半连接队列；\n该队列为每个客户端的SYN包(SYN=i)开设一个条目，\n该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。\n这些条目所标识的连接在服务器处于SYN_ RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</code></pre></li>\n<li><p><strong>DOS攻击</strong></p>\n<pre><code>因为服务器会维护一个半连接的队列，那如果我们向服务器发送大量伪造的无效的半连接请求，便会消耗cpu和内存，\n当伪造的SYN包长时间占用半连接队列，正常的SYN请求遍会被抛弃，服务器便面临着网络阻塞甚至系统瘫痪的风险，\n这也是比较常见的一种DOS攻击方式。</code></pre></li>\n</ol>\n<hr>"},{"title":"网络分层","date":"2020-06-20T07:34:22.000Z","_content":"\n本文简单介绍一下两种分层模型：OSI网络分层和TCP/IP网络分层。\n\n### OSI模型\n> OSI模型一共分为七层，由上至下分别是：\n+ 应用层\n+ 表达层\n+ 会话层\n+ 传输层\n+ 网络层\n+ 数据链路层\n+ 物理层\n<!--more-->\n\n#### 应用层(Application)\n        应用层的协议一般有：HTTP、FTP、DNS等，这一层是最接近用户的一层。\n\n#### 表达层(Presentation)\n        该层的主要功能：转换，压缩和加密，常见的加密协议为SSL。\n\n#### 会话层(Session)\n        我们可以把会话层理解为两个应用进程之间的逻辑连接，同时会话层还负责了管理和确定传输模式\n        计算机传输数据有三种模式：单向、半双工、全双工\n\n#### 传输层(Transport)\n        传输层就是表面意思传输了，端到端，主机到主机的传输\n        这一层最主要的就是TCP、UDP啦，包括三次握手、四次挥手是必须要会的\n\n#### 网络层(Network)\n        网络层需要提供三个最基本的功能：地址、路由、分段和重组\n        网络层上最重要的协议IP（Internet Protocol），就是为了这些功能而设计的。目前有IPv4和IPv6两个版本。\n\n#### 数据链路层(Data Link)\n        数据链路层又分为两个子层：逻辑链路控制层(Logical Link Control)和介质访问控制层(Media Access Control)\n        数据链路层就是关心如何把数据从一个设备发送到另一个设备\n\n#### 物理层(Physical)\n        物理层位于OSI的底层，所有其他层的数据最终都必须经由物理层才能发送出去。\n\n-------------\n\n### TCP/IP模型\n        TCP/IP模型分为四层：应用层（Application）、传输层（Host-to-Host Transport）、互联网层(Internet)、网络接口层(Network Interface)。\n\n在TCP/IP模型中并不包含物理层。另外，两个重要的协议ARP（Address Resolution Protocol，地址解析协议）和RARP（Reverse Address Resolution Protocol，反向地址转换协议），在OSI模型中一般被认为是在位于第二层数据链路层和第三层网络层之间，而在TCP/IP模型中则位于网络接口层。(此段转载自掘金：https://juejin.im/post/5a98e1f7f265da237410694e 作者：MinGRn）\n","source":"_posts/net-OSI.md","raw":"---\ntitle: 网络分层\ntags:\n  - 面试题\n  - 网络\n  - TCP\ncategories:\n  - 计算机网络\ndate: 2020-06-20 15:34:22\n---\n\n本文简单介绍一下两种分层模型：OSI网络分层和TCP/IP网络分层。\n\n### OSI模型\n> OSI模型一共分为七层，由上至下分别是：\n+ 应用层\n+ 表达层\n+ 会话层\n+ 传输层\n+ 网络层\n+ 数据链路层\n+ 物理层\n<!--more-->\n\n#### 应用层(Application)\n        应用层的协议一般有：HTTP、FTP、DNS等，这一层是最接近用户的一层。\n\n#### 表达层(Presentation)\n        该层的主要功能：转换，压缩和加密，常见的加密协议为SSL。\n\n#### 会话层(Session)\n        我们可以把会话层理解为两个应用进程之间的逻辑连接，同时会话层还负责了管理和确定传输模式\n        计算机传输数据有三种模式：单向、半双工、全双工\n\n#### 传输层(Transport)\n        传输层就是表面意思传输了，端到端，主机到主机的传输\n        这一层最主要的就是TCP、UDP啦，包括三次握手、四次挥手是必须要会的\n\n#### 网络层(Network)\n        网络层需要提供三个最基本的功能：地址、路由、分段和重组\n        网络层上最重要的协议IP（Internet Protocol），就是为了这些功能而设计的。目前有IPv4和IPv6两个版本。\n\n#### 数据链路层(Data Link)\n        数据链路层又分为两个子层：逻辑链路控制层(Logical Link Control)和介质访问控制层(Media Access Control)\n        数据链路层就是关心如何把数据从一个设备发送到另一个设备\n\n#### 物理层(Physical)\n        物理层位于OSI的底层，所有其他层的数据最终都必须经由物理层才能发送出去。\n\n-------------\n\n### TCP/IP模型\n        TCP/IP模型分为四层：应用层（Application）、传输层（Host-to-Host Transport）、互联网层(Internet)、网络接口层(Network Interface)。\n\n在TCP/IP模型中并不包含物理层。另外，两个重要的协议ARP（Address Resolution Protocol，地址解析协议）和RARP（Reverse Address Resolution Protocol，反向地址转换协议），在OSI模型中一般被认为是在位于第二层数据链路层和第三层网络层之间，而在TCP/IP模型中则位于网络接口层。(此段转载自掘金：https://juejin.im/post/5a98e1f7f265da237410694e 作者：MinGRn）\n","slug":"net-OSI","published":1,"updated":"2020-06-20T08:18:49.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketjzhaj000mi5ng9wm64top","content":"<p>本文简单介绍一下两种分层模型：OSI网络分层和TCP/IP网络分层。</p>\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><blockquote>\n<p>OSI模型一共分为七层，由上至下分别是：</p>\n</blockquote>\n<ul>\n<li>应用层</li>\n<li>表达层</li>\n<li>会话层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层</li>\n<li>物理层<a id=\"more\"></a>\n\n</li>\n</ul>\n<h4 id=\"应用层-Application\"><a href=\"#应用层-Application\" class=\"headerlink\" title=\"应用层(Application)\"></a>应用层(Application)</h4><pre><code>应用层的协议一般有：HTTP、FTP、DNS等，这一层是最接近用户的一层。</code></pre><h4 id=\"表达层-Presentation\"><a href=\"#表达层-Presentation\" class=\"headerlink\" title=\"表达层(Presentation)\"></a>表达层(Presentation)</h4><pre><code>该层的主要功能：转换，压缩和加密，常见的加密协议为SSL。</code></pre><h4 id=\"会话层-Session\"><a href=\"#会话层-Session\" class=\"headerlink\" title=\"会话层(Session)\"></a>会话层(Session)</h4><pre><code>我们可以把会话层理解为两个应用进程之间的逻辑连接，同时会话层还负责了管理和确定传输模式\n计算机传输数据有三种模式：单向、半双工、全双工</code></pre><h4 id=\"传输层-Transport\"><a href=\"#传输层-Transport\" class=\"headerlink\" title=\"传输层(Transport)\"></a>传输层(Transport)</h4><pre><code>传输层就是表面意思传输了，端到端，主机到主机的传输\n这一层最主要的就是TCP、UDP啦，包括三次握手、四次挥手是必须要会的</code></pre><h4 id=\"网络层-Network\"><a href=\"#网络层-Network\" class=\"headerlink\" title=\"网络层(Network)\"></a>网络层(Network)</h4><pre><code>网络层需要提供三个最基本的功能：地址、路由、分段和重组\n网络层上最重要的协议IP（Internet Protocol），就是为了这些功能而设计的。目前有IPv4和IPv6两个版本。</code></pre><h4 id=\"数据链路层-Data-Link\"><a href=\"#数据链路层-Data-Link\" class=\"headerlink\" title=\"数据链路层(Data Link)\"></a>数据链路层(Data Link)</h4><pre><code>数据链路层又分为两个子层：逻辑链路控制层(Logical Link Control)和介质访问控制层(Media Access Control)\n数据链路层就是关心如何把数据从一个设备发送到另一个设备</code></pre><h4 id=\"物理层-Physical\"><a href=\"#物理层-Physical\" class=\"headerlink\" title=\"物理层(Physical)\"></a>物理层(Physical)</h4><pre><code>物理层位于OSI的底层，所有其他层的数据最终都必须经由物理层才能发送出去。</code></pre><hr>\n<h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><pre><code>TCP/IP模型分为四层：应用层（Application）、传输层（Host-to-Host Transport）、互联网层(Internet)、网络接口层(Network Interface)。</code></pre><p>在TCP/IP模型中并不包含物理层。另外，两个重要的协议ARP（Address Resolution Protocol，地址解析协议）和RARP（Reverse Address Resolution Protocol，反向地址转换协议），在OSI模型中一般被认为是在位于第二层数据链路层和第三层网络层之间，而在TCP/IP模型中则位于网络接口层。(此段转载自掘金：<a href=\"https://juejin.im/post/5a98e1f7f265da237410694e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a98e1f7f265da237410694e</a> 作者：MinGRn）</p>\n","site":{"data":{}},"excerpt":"<p>本文简单介绍一下两种分层模型：OSI网络分层和TCP/IP网络分层。</p>\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><blockquote>\n<p>OSI模型一共分为七层，由上至下分别是：</p>\n</blockquote>\n<ul>\n<li>应用层</li>\n<li>表达层</li>\n<li>会话层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层</li>\n<li>物理层","more":"</li>\n</ul>\n<h4 id=\"应用层-Application\"><a href=\"#应用层-Application\" class=\"headerlink\" title=\"应用层(Application)\"></a>应用层(Application)</h4><pre><code>应用层的协议一般有：HTTP、FTP、DNS等，这一层是最接近用户的一层。</code></pre><h4 id=\"表达层-Presentation\"><a href=\"#表达层-Presentation\" class=\"headerlink\" title=\"表达层(Presentation)\"></a>表达层(Presentation)</h4><pre><code>该层的主要功能：转换，压缩和加密，常见的加密协议为SSL。</code></pre><h4 id=\"会话层-Session\"><a href=\"#会话层-Session\" class=\"headerlink\" title=\"会话层(Session)\"></a>会话层(Session)</h4><pre><code>我们可以把会话层理解为两个应用进程之间的逻辑连接，同时会话层还负责了管理和确定传输模式\n计算机传输数据有三种模式：单向、半双工、全双工</code></pre><h4 id=\"传输层-Transport\"><a href=\"#传输层-Transport\" class=\"headerlink\" title=\"传输层(Transport)\"></a>传输层(Transport)</h4><pre><code>传输层就是表面意思传输了，端到端，主机到主机的传输\n这一层最主要的就是TCP、UDP啦，包括三次握手、四次挥手是必须要会的</code></pre><h4 id=\"网络层-Network\"><a href=\"#网络层-Network\" class=\"headerlink\" title=\"网络层(Network)\"></a>网络层(Network)</h4><pre><code>网络层需要提供三个最基本的功能：地址、路由、分段和重组\n网络层上最重要的协议IP（Internet Protocol），就是为了这些功能而设计的。目前有IPv4和IPv6两个版本。</code></pre><h4 id=\"数据链路层-Data-Link\"><a href=\"#数据链路层-Data-Link\" class=\"headerlink\" title=\"数据链路层(Data Link)\"></a>数据链路层(Data Link)</h4><pre><code>数据链路层又分为两个子层：逻辑链路控制层(Logical Link Control)和介质访问控制层(Media Access Control)\n数据链路层就是关心如何把数据从一个设备发送到另一个设备</code></pre><h4 id=\"物理层-Physical\"><a href=\"#物理层-Physical\" class=\"headerlink\" title=\"物理层(Physical)\"></a>物理层(Physical)</h4><pre><code>物理层位于OSI的底层，所有其他层的数据最终都必须经由物理层才能发送出去。</code></pre><hr>\n<h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><pre><code>TCP/IP模型分为四层：应用层（Application）、传输层（Host-to-Host Transport）、互联网层(Internet)、网络接口层(Network Interface)。</code></pre><p>在TCP/IP模型中并不包含物理层。另外，两个重要的协议ARP（Address Resolution Protocol，地址解析协议）和RARP（Reverse Address Resolution Protocol，反向地址转换协议），在OSI模型中一般被认为是在位于第二层数据链路层和第三层网络层之间，而在TCP/IP模型中则位于网络接口层。(此段转载自掘金：<a href=\"https://juejin.im/post/5a98e1f7f265da237410694e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a98e1f7f265da237410694e</a> 作者：MinGRn）</p>"},{"title":"2021届校招内推分享","date":"2020-09-08T06:00:27.000Z","_content":"\n> 分享几个2021届校招内推信息，持续更新\n\n* 快手21届校招内推，直接申请投递即可\nhttps://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&recruitSubProjectCode=2021qiuzhao\n<!--more-->\n---------------\n* 字节跳动内推，直接申请\n<img src=\"/images/tiktok.jpg\" width=\"30%\" height=\"30%\">\n----------------\n\n* 贝壳Java开发内推，岗位信息如下，内推添加微信发送简历 微信：m1159950461(添加请实名说明原因)\n    http://campus.ke.com/zpdetail/190239336?k=java&r=-1&d=&c=&p=\n----------------\n\n* 滴滴内推\n<img src=\"/images/didi.jpg\" width=\"30%\" height=\"30%\">\n\n","source":"_posts/java-push.md","raw":"---\ntitle: 2021届校招内推分享\ntags:\n  - 校招\ncategories:\n  - 内推\ndate: 2020-09-08 14:00:27\n---\n\n> 分享几个2021届校招内推信息，持续更新\n\n* 快手21届校招内推，直接申请投递即可\nhttps://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&recruitSubProjectCode=2021qiuzhao\n<!--more-->\n---------------\n* 字节跳动内推，直接申请\n<img src=\"/images/tiktok.jpg\" width=\"30%\" height=\"30%\">\n----------------\n\n* 贝壳Java开发内推，岗位信息如下，内推添加微信发送简历 微信：m1159950461(添加请实名说明原因)\n    http://campus.ke.com/zpdetail/190239336?k=java&r=-1&d=&c=&p=\n----------------\n\n* 滴滴内推\n<img src=\"/images/didi.jpg\" width=\"30%\" height=\"30%\">\n\n","slug":"java-push","published":1,"updated":"2020-09-08T06:52:26.211Z","_id":"cketjzham000qi5ng1ut37y49","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>分享几个2021届校招内推信息，持续更新</p>\n</blockquote>\n<ul>\n<li>快手21届校招内推，直接申请投递即可<br><a href=\"https://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&amp;recruitSubProjectCode=2021qiuzhao\" target=\"_blank\" rel=\"noopener\">https://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&amp;recruitSubProjectCode=2021qiuzhao</a><a id=\"more\"></a>\n</li>\n</ul>\n<hr>\n<ul>\n<li>字节跳动内推，直接申请<img src=\"/images/tiktok.jpg\" width=\"30%\" height=\"30%\">\n</li>\n</ul>\n<hr>\n<ul>\n<li>贝壳Java开发内推，岗位信息如下，内推添加微信发送简历 微信：m1159950461(添加请实名说明原因)<br>  <a href=\"http://campus.ke.com/zpdetail/190239336?k=java&amp;r=-1&amp;d=&amp;c=&amp;p=\" target=\"_blank\" rel=\"noopener\">http://campus.ke.com/zpdetail/190239336?k=java&amp;r=-1&amp;d=&amp;c=&amp;p=</a></li>\n</ul>\n<hr>\n<ul>\n<li>滴滴内推<img src=\"/images/didi.jpg\" width=\"30%\" height=\"30%\">\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>分享几个2021届校招内推信息，持续更新</p>\n</blockquote>\n<ul>\n<li>快手21届校招内推，直接申请投递即可<br><a href=\"https://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&amp;recruitSubProjectCode=2021qiuzhao\" target=\"_blank\" rel=\"noopener\">https://campus.kuaishou.cn/recruit/campus/e/#/campus/jobs?internalPerson=TkttKFlRkBS2hYdhonMHuw%3D%3D&amp;recruitSubProjectCode=2021qiuzhao</a>","more":"</li>\n</ul>\n<hr>\n<ul>\n<li>字节跳动内推，直接申请<img src=\"/images/tiktok.jpg\" width=\"30%\" height=\"30%\">\n</li>\n</ul>\n<hr>\n<ul>\n<li>贝壳Java开发内推，岗位信息如下，内推添加微信发送简历 微信：m1159950461(添加请实名说明原因)<br>  <a href=\"http://campus.ke.com/zpdetail/190239336?k=java&amp;r=-1&amp;d=&amp;c=&amp;p=\" target=\"_blank\" rel=\"noopener\">http://campus.ke.com/zpdetail/190239336?k=java&amp;r=-1&amp;d=&amp;c=&amp;p=</a></li>\n</ul>\n<hr>\n<ul>\n<li>滴滴内推<img src=\"/images/didi.jpg\" width=\"30%\" height=\"30%\">\n\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cketjzhaa0008i5ngab8s9ik0","category_id":"cketjzha50004i5ngepk3hpko","_id":"cketjzhaf000ei5ng42sk86ko"},{"post_id":"cketjzh9n0000i5ng7bplcw8u","category_id":"cketjzha50004i5ngepk3hpko","_id":"cketjzhag000ii5ng3mywdqpd"},{"post_id":"cketjzhaa0009i5ng5mk0drey","category_id":"cketjzha50004i5ngepk3hpko","_id":"cketjzhah000ki5ng3gwv08jn"},{"post_id":"cketjzha80006i5nga4a51juc","category_id":"cketjzha50004i5ngepk3hpko","_id":"cketjzham000oi5ngak0gb746"},{"post_id":"cketjzhag000ji5ng8o2g35a3","category_id":"cketjzhaf000gi5ngbzxp567r","_id":"cketjzhan000ti5nga5tucdtl"},{"post_id":"cketjzhad000ci5ngd0szhnau","category_id":"cketjzhaf000gi5ngbzxp567r","_id":"cketjzhao000wi5ng0occdzm3"},{"post_id":"cketjzhaj000mi5ng9wm64top","category_id":"cketjzhaf000gi5ngbzxp567r","_id":"cketjzhao000yi5ng3eufeuss"},{"post_id":"cketjzhae000di5ngfj0q4bub","category_id":"cketjzhal000ni5ng5vgqb9md","_id":"cketjzhap0010i5ng32vqe8l2"},{"post_id":"cketjzhag000hi5ng5fe9ci3c","category_id":"cketjzhaf000gi5ngbzxp567r","_id":"cketjzhap0013i5ng10aggim8"},{"post_id":"cketjzham000qi5ng1ut37y49","category_id":"cketk0d3p0000j9ng6gfyf53v","_id":"cketk0d3v0003j9nganz9cjal"}],"PostTag":[{"post_id":"cketjzh9n0000i5ng7bplcw8u","tag_id":"cketjzha70005i5ng6eucfqmw","_id":"cketjzham000pi5ng52tj0hs6"},{"post_id":"cketjzh9n0000i5ng7bplcw8u","tag_id":"cketjzhab000bi5ng2wx14kyj","_id":"cketjzhan000ri5ngbjsc58c2"},{"post_id":"cketjzh9n0000i5ng7bplcw8u","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhao000vi5ng7kpyfcqo"},{"post_id":"cketjzha80006i5nga4a51juc","tag_id":"cketjzha70005i5ng6eucfqmw","_id":"cketjzhap000zi5ng4rn68dl8"},{"post_id":"cketjzha80006i5nga4a51juc","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhap0011i5ng7s3ndmgz"},{"post_id":"cketjzhaa0008i5ngab8s9ik0","tag_id":"cketjzha70005i5ng6eucfqmw","_id":"cketjzhaq0015i5ngaoun09w1"},{"post_id":"cketjzhaa0008i5ngab8s9ik0","tag_id":"cketjzhab000bi5ng2wx14kyj","_id":"cketjzhaq0016i5ng335fal0y"},{"post_id":"cketjzhaa0008i5ngab8s9ik0","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhaq0018i5ngacthem9k"},{"post_id":"cketjzhaa0009i5ng5mk0drey","tag_id":"cketjzha70005i5ng6eucfqmw","_id":"cketjzhar001ai5ngfw6hc7mn"},{"post_id":"cketjzhaa0009i5ng5mk0drey","tag_id":"cketjzhab000bi5ng2wx14kyj","_id":"cketjzhar001bi5ng0diado7s"},{"post_id":"cketjzhaa0009i5ng5mk0drey","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhas001di5ngh3s721on"},{"post_id":"cketjzhad000ci5ngd0szhnau","tag_id":"cketjzhar0019i5nga7aie71g","_id":"cketjzhas001fi5ngfk7i8pvn"},{"post_id":"cketjzhad000ci5ngd0szhnau","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhas001gi5ng58eyhgcb"},{"post_id":"cketjzhae000di5ngfj0q4bub","tag_id":"cketjzhas001ei5ng5q9sbcg7","_id":"cketjzhau001ji5ngh9q74fwe"},{"post_id":"cketjzhae000di5ngfj0q4bub","tag_id":"cketjzhat001hi5ngg6zp1lf2","_id":"cketjzhau001ki5ng2b3uh9bd"},{"post_id":"cketjzhag000hi5ng5fe9ci3c","tag_id":"cketjzhat001ii5ngahm663kp","_id":"cketjzhav001ni5ngama134jh"},{"post_id":"cketjzhag000hi5ng5fe9ci3c","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhav001oi5ngajpbep58"},{"post_id":"cketjzhag000hi5ng5fe9ci3c","tag_id":"cketjzhau001li5ngcyl3g3rp","_id":"cketjzhaw001qi5ngdt6ag4bl"},{"post_id":"cketjzhag000ji5ng8o2g35a3","tag_id":"cketjzhav001mi5ng47htb1hw","_id":"cketjzhaw001si5ngcameg9y5"},{"post_id":"cketjzhag000ji5ng8o2g35a3","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhax001ti5ngdipzfj1l"},{"post_id":"cketjzhag000ji5ng8o2g35a3","tag_id":"cketjzhav001pi5ng4id32v37","_id":"cketjzhax001vi5nggxei9au8"},{"post_id":"cketjzhaj000mi5ng9wm64top","tag_id":"cketjzhaf000fi5ng4kuvemik","_id":"cketjzhay001wi5ng5dd870qn"},{"post_id":"cketjzhaj000mi5ng9wm64top","tag_id":"cketjzhat001ii5ngahm663kp","_id":"cketjzhay001xi5ngh6xgdyej"},{"post_id":"cketjzhaj000mi5ng9wm64top","tag_id":"cketjzhav001pi5ng4id32v37","_id":"cketjzhay001yi5ng3c6v0jxf"},{"post_id":"cketjzham000qi5ng1ut37y49","tag_id":"cketk0d3t0001j9ngd15kde8r","_id":"cketk0d3w0004j9ng8ojo88np"}],"Tag":[{"name":"leetcode","_id":"cketjzha70005i5ng6eucfqmw"},{"name":"algorithm","_id":"cketjzhab000bi5ng2wx14kyj"},{"name":"面试题","_id":"cketjzhaf000fi5ng4kuvemik"},{"name":"进程通信","_id":"cketjzhar0019i5nga7aie71g"},{"name":"Java面试","_id":"cketjzhas001ei5ng5q9sbcg7"},{"name":"图谱","_id":"cketjzhat001hi5ngg6zp1lf2"},{"name":"网络","_id":"cketjzhat001ii5ngahm663kp"},{"name":"dos","_id":"cketjzhau001li5ngcyl3g3rp"},{"name":"internet","_id":"cketjzhav001mi5ng47htb1hw"},{"name":"TCP","_id":"cketjzhav001pi5ng4id32v37"},{"name":"校招","_id":"cketk0d3t0001j9ngd15kde8r"},{"name":"面试","_id":"cketk0d3v0002j9ngafsl99n2"}]}}